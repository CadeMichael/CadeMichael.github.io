import{s as oa,n as vs}from"./CrGyUMwP.js";import{S as ta,i as ca,d as n,a as l,k as i,c as o,l as t,g as e,m as y,n as Ws,h as c,j as p,H as E}from"./uW2q-9yC.js";function ia(Js){let r,xs='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#returning-to-emacs">Returning to Emacs</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#must-haves">Must Haves</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#installation">Installation</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#macos">MacOs</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#linux">Linux</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#file-layout">File layout</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#essential-packages">Essential Packages</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#straightel">Straight.el</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#emacs-configuration">Emacs Configuration</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#use-package-setup-and-integration-with-straight">Use-package setup and integration with straight</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#evil-mode-and-associated-packages">Evil mode and associated packages</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#completion-ui-and-project-searching">Completion ui and project searching</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#global-keybindings">Global keybindings</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#version-control-git-tooling">Version control (git) tooling</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#language-tooling">Language tooling</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#rust-specific-tooling">Rust specific tooling</a></li></ol></li></ol>',as,D,ws='<a aria-hidden="true" tabindex="-1" href="#returning-to-emacs"><span class="icon icon-link"></span></a>Returning to Emacs',ns,B,Hs='<a aria-hidden="true" tabindex="-1" href="#must-haves"><span class="icon icon-link"></span></a>Must Haves',ls,L,_s="to get roped back into emacs I my two goals are <strong>minimalism</strong> and what I would consider a bare minimum set of features.",es,M,Ls=`<li>lsp <em>(eglot)</em> <ul><li>need lsp to be productive</li></ul></li> <li>pacakge management <em>(straight.el)</em> <ul><li>not cloning packages or using a gui</li></ul></li> <li>completion <em>(vertico / consult)</em> <ul><li>command and file searching completion</li></ul></li> <li>project searching <em>(consult)</em> <ul><li>need to quickly search files, not just ’/’ and search in buffer</li></ul></li> <li>treesitter <em>(treesit</em>)
<ul><li>better syntax highlighting</li> <li><em>folding</em></li></ul></li> <li>vim bindings <em>(evil)</em> <ul><li>can’t do anything else now</li></ul></li> <li>the distinguishing emacs feature <strong>Repl support</strong> <ul><li>no one has better repl interopt with interpreted languages than emacs</li></ul></li> <li>Running code without leaving editor (editing buffer) <em>(quickrun)</em></li>`,ps,T,Ms="I have a few other packages installed but the main goal of all of them is to satisfy that list.",os,d,Ts='<a aria-hidden="true" tabindex="-1" href="#installation"><span class="icon icon-link"></span></a>Installation',ts,u,Cs='<a aria-hidden="true" tabindex="-1" href="#macos"><span class="icon icon-link"></span></a>MacOs',cs,P,Qs=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#A9B665">$</span><span style="color:#D8A657"> brew</span><span style="color:#D8A657"> tap</span><span style="color:#D8A657"> d12frosted/emacs-plus</span></span>
<span class="line"><span style="color:#A9B665">$</span><span style="color:#D8A657"> brew</span><span style="color:#D8A657"> install</span><span style="color:#D8A657"> emacs-plus</span><span style="color:#D8A657"> --with-native-comp</span></span></code></pre>`,S,f,js='<a aria-hidden="true" tabindex="-1" href="#linux"><span class="icon icon-link"></span></a>Linux',is,C,qs="<li>using Nix or building from source.</li>",rs,m,Ps='<a aria-hidden="true" tabindex="-1" href="#file-layout"><span class="icon icon-link"></span></a>File layout',ys,j,Ss=`<li>in your <code>~/.config/emacs/</code> directory
<ul><li><code>init.el</code></li> <li><code>early-init.el</code></li> <li><code>config.el</code></li></ul></li>`,Es,g,Rs='<a aria-hidden="true" tabindex="-1" href="#essential-packages"><span class="icon icon-link"></span></a>Essential Packages',Ds,q,Fs=`<li>straight</li> <li>use-package</li> <li>evil 
<ul><li>evil-collection</li> <li>undo-fu</li></ul></li> <li>vertico</li> <li>orderless</li> <li>company</li> <li>which-key
<ul><li>marginalia</li></ul></li> <li>quickrun</li> <li>treesit-fold</li>`,Bs,h,Os='<a aria-hidden="true" tabindex="-1" href="#straightel"><span class="icon icon-link"></span></a>Straight.el',ds,R,Xs=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#928374;font-style:italic">;; ~/.config/emacs/init.el</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#7DAEA3">defvar</span><span style="color:#D4BE98"> bootstrap-version)</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#E78A4E">let</span><span style="color:#D4BE98"> ((bootstrap-file</span></span>
<span class="line"><span style="color:#D4BE98">       (</span><span style="color:#A9B665">expand-file-name</span></span>
<span class="line"><span style="color:#D8A657">        "straight/repos/straight.el/bootstrap.el"</span></span>
<span class="line"><span style="color:#D4BE98">        (</span><span style="color:#EA6962">or</span><span style="color:#D4BE98"> (</span><span style="color:#A9B665">bound-and-true-p</span><span style="color:#D4BE98"> straight-base-dir)</span></span>
<span class="line"><span style="color:#D4BE98">            user-emacs-directory)))</span></span>
<span class="line"><span style="color:#D4BE98">      (bootstrap-version </span><span style="color:#D3869B">7</span><span style="color:#D4BE98">))</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#EA6962">unless</span><span style="color:#D4BE98"> (</span><span style="color:#A9B665">file-exists-p</span><span style="color:#D4BE98"> bootstrap-file)</span></span>
<span class="line"><span style="color:#D4BE98">    (</span><span style="color:#A9B665">with-current-buffer</span></span>
<span class="line"><span style="color:#D4BE98">        (</span><span style="color:#A9B665">url-retrieve-synchronously</span></span>
<span class="line"><span style="color:#D8A657">         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"</span></span>
<span class="line"><span style="color:#D4BE98">         'silent 'inhibit-cookies)</span></span>
<span class="line"><span style="color:#D4BE98">      (</span><span style="color:#A9B665">goto-char</span><span style="color:#D4BE98"> (</span><span style="color:#A9B665">point-max</span><span style="color:#D4BE98">))</span></span>
<span class="line"><span style="color:#D4BE98">      (</span><span style="color:#A9B665">eval-print-last-sexp</span><span style="color:#D4BE98">)))</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#EA6962">load</span><span style="color:#D4BE98"> bootstrap-file </span><span style="color:#D3869B">nil</span><span style="color:#D4BE98"> 'nomessage))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; ~/.config/emacs/early-init.el</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> package-enable-at-startup </span><span style="color:#D3869B">nil</span><span style="color:#D4BE98">)</span></span></code></pre>`,F,k,Us='<a aria-hidden="true" tabindex="-1" href="#emacs-configuration"><span class="icon icon-link"></span></a>Emacs Configuration',us,O,Ys=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> emacs</span></span>
<span class="line"><span style="color:#D4BE98">  :straight </span><span style="color:#D3869B">nil</span></span>
<span class="line"><span style="color:#D4BE98">  :preface</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#7DAEA3">defun</span><span style="color:#A9B665"> load-config-file</span><span style="color:#D4BE98"> (file)</span></span>
<span class="line"><span style="color:#D8A657">    "Load files in the config dir."</span></span>
<span class="line"><span style="color:#D4BE98">    (</span><span style="color:#EA6962">load</span><span style="color:#D4BE98"> (</span><span style="color:#A9B665">expand-file-name file my-config-dir</span><span style="color:#D4BE98">)))</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#7DAEA3">defun</span><span style="color:#A9B665"> reload-emacs-config</span><span style="color:#D4BE98"> ()</span></span>
<span class="line"><span style="color:#D8A657">    "Reload config.el emacs configuration."</span></span>
<span class="line"><span style="color:#D4BE98">    (</span><span style="color:#E78A4E">interactive</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D4BE98">    (</span><span style="color:#EA6962">load</span><span style="color:#D4BE98"> (</span><span style="color:#A9B665">expand-file-name </span><span style="color:#D8A657">"config.el"</span><span style="color:#A9B665"> my-config-dir</span><span style="color:#D4BE98">)))</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#7DAEA3">defun</span><span style="color:#A9B665"> open-config-file</span><span style="color:#D4BE98"> ()</span></span>
<span class="line"><span style="color:#D8A657">    "Open this file ie 'config.el'."</span></span>
<span class="line"><span style="color:#D4BE98">    (</span><span style="color:#E78A4E">interactive</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D4BE98">    (</span><span style="color:#A9B665">find-file </span><span style="color:#D4BE98">(</span><span style="color:#A9B665">expand-file-name </span><span style="color:#D8A657">"config.el"</span><span style="color:#A9B665"> my-config-dir</span><span style="color:#D4BE98">)))</span></span>
<span class="line"><span style="color:#D4BE98">  :config</span></span>
<span class="line"><span style="color:#928374;font-style:italic">  ;; System</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> warning-minimul-level :error)   </span><span style="color:#928374;font-style:italic">; only warn on errors</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#928374;font-style:italic">                                 ; no warnings</span></span>
<span class="line"><span style="color:#D4BE98">   native-comp-async-report-warnings-errors </span><span style="color:#D3869B">nil</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> ring-bell-function 'ignore)     </span><span style="color:#928374;font-style:italic">; no bell noise</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> make-backup-files </span><span style="color:#D3869B">nil</span><span style="color:#D4BE98">)          </span><span style="color:#928374;font-style:italic">; no temp files</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> read-extended-command-predicate </span><span style="color:#928374;font-style:italic">; only show 'M-x' commands relevant to mode</span></span>
<span class="line"><span style="color:#D4BE98">	#'command-completion-default-include-p)</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> enable-recursive-minibuffers t) </span><span style="color:#928374;font-style:italic">; allow opening minibufs in minibufs</span></span>
<span class="line"><span style="color:#D4BE98">  (setopt use-short-answers t)		</span><span style="color:#928374;font-style:italic">; y or n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">  ;; Theme</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#EA6962">if</span><span style="color:#D4BE98"> (</span><span style="color:#EA6962">eq</span><span style="color:#D4BE98"> system-type 'darwin)          </span><span style="color:#928374;font-style:italic">; set font based on OS</span></span>
<span class="line"><span style="color:#D4BE98">      (</span><span style="color:#A9B665">add-to-list</span><span style="color:#D4BE98"> 'default-frame-alist</span></span>
<span class="line"><span style="color:#D4BE98">		   '(font </span><span style="color:#E78A4E">.</span><span style="color:#D8A657"> "Hack Nerd Font 16"</span><span style="color:#D4BE98">))</span></span>
<span class="line"><span style="color:#D4BE98">    (</span><span style="color:#A9B665">add-to-list</span><span style="color:#D4BE98"> 'default-frame-alist</span></span>
<span class="line"><span style="color:#D4BE98">		 '(font </span><span style="color:#E78A4E">.</span><span style="color:#D8A657"> "Blex Mono Nerd Font 18"</span><span style="color:#D4BE98">)))</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> inhibit-startup-message t)      </span><span style="color:#928374;font-style:italic">; no splash screen</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#A9B665">menu-bar-mode</span><span style="color:#D3869B"> -1</span><span style="color:#D4BE98">)                    </span><span style="color:#928374;font-style:italic">; no menu bar</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#A9B665">tool-bar-mode</span><span style="color:#D3869B"> -1</span><span style="color:#D4BE98">)                    </span><span style="color:#928374;font-style:italic">; no tool bar</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#A9B665">scroll-bar-mode</span><span style="color:#D3869B"> -1</span><span style="color:#D4BE98">)                  </span><span style="color:#928374;font-style:italic">; no scroll bar</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#A9B665">global-visual-line-mode</span><span style="color:#D4BE98">)		</span><span style="color:#928374;font-style:italic">; better line wrapping</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">  ;; Org mode / notes</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#A9B665">require</span><span style="color:#D4BE98"> 'org-tempo)                  </span><span style="color:#928374;font-style:italic">; org snippets</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> org-startup-indented t)         </span><span style="color:#928374;font-style:italic">; indent org mode</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#928374;font-style:italic">                                 ; no indent in src blocks</span></span>
<span class="line"><span style="color:#D4BE98">   org-edit-src-content-indentation </span><span style="color:#D3869B">0</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> org-src-preserve-indentation t) </span><span style="color:#928374;font-style:italic">; fix src block indents</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> org-src-tab-acts-natively t)    </span><span style="color:#928374;font-style:italic">; allow indenting in src blocks</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#A9B665">org-babel-do-load-languages</span><span style="color:#928374;font-style:italic">          ; load babel languages</span></span>
<span class="line"><span style="color:#D4BE98">   'org-babel-load-languages</span></span>
<span class="line"><span style="color:#D4BE98">   '((python </span><span style="color:#E78A4E">.</span><span style="color:#D4BE98"> t)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4BE98">  :hook</span></span>
<span class="line"><span style="color:#928374;font-style:italic">  ;; Programming mode hooks</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#A9B665">prog-mode</span><span style="color:#E78A4E"> .</span><span style="color:#D4BE98"> display-line-numbers-mode)</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#A9B665">prog-mode</span><span style="color:#E78A4E"> .</span><span style="color:#D4BE98"> hl-line-mode)</span></span>
<span class="line"><span style="color:#928374;font-style:italic">  ;; Folding for non ts-modes</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#A9B665">emacs-lisp-mode</span><span style="color:#E78A4E"> .</span><span style="color:#D4BE98"> hs-minor-mode)</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#A9B665">c++-mode</span><span style="color:#E78A4E"> .</span><span style="color:#D4BE98"> hs-minor-mode))</span></span></code></pre>`,U,A,zs='<a aria-hidden="true" tabindex="-1" href="#use-package-setup-and-integration-with-straight"><span class="icon icon-link"></span></a>Use-package setup and integration with straight',fs,z,Zs=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#928374;font-style:italic">;; Package management and setup with use-package</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">straight-use-package</span><span style="color:#D4BE98"> 'use-package)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Make straight the default</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> straight</span></span>
<span class="line"><span style="color:#D4BE98">  :custom</span></span>
<span class="line"><span style="color:#D4BE98">  (straight-use-package-by-default t)</span></span>
<span class="line"><span style="color:#D4BE98">  (straight-cache-autoloads t))</span></span></code></pre>`,I,b,Is='<a aria-hidden="true" tabindex="-1" href="#evil-mode-and-associated-packages"><span class="icon icon-link"></span></a>Evil mode and associated packages',ms,V,sa=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#928374;font-style:italic">;; Undo for evil mode</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> undo-fu)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Evil mode</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> evil</span></span>
<span class="line"><span style="color:#D4BE98">  :init</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> evil-want-keybinding </span><span style="color:#D3869B">nil</span><span style="color:#D4BE98">)  </span><span style="color:#928374;font-style:italic">; needed for evil-collection</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> evil-want-C-u-scroll t)    </span><span style="color:#928374;font-style:italic">; allow scroll up with 'C-u'</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> evil-want-C-d-scroll t)    </span><span style="color:#928374;font-style:italic">; allow scroll down with 'C-d'</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> evil-undo-system 'undo-fu) </span><span style="color:#928374;font-style:italic">; undo system for 'C-r'</span></span>
<span class="line"><span style="color:#D4BE98">  :config</span></span>
<span class="line"><span style="color:#D4BE98">  (evil-mode </span><span style="color:#D3869B">1</span><span style="color:#D4BE98">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Path management to keep env variable consistent</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> exec-path-from-shell</span></span>
<span class="line"><span style="color:#D4BE98">  :config</span></span>
<span class="line"><span style="color:#D4BE98">  (exec-path-from-shell-initialize))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Evil collections for keybindings accross modes</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> evil-collection</span></span>
<span class="line"><span style="color:#D4BE98">  :after evil</span></span>
<span class="line"><span style="color:#D4BE98">  :config</span></span>
<span class="line"><span style="color:#D4BE98">  (evil-collection-init))</span></span></code></pre>`,N,v,Vs='<a aria-hidden="true" tabindex="-1" href="#completion-ui-and-project-searching"><span class="icon icon-link"></span></a>Completion ui and project searching',gs,G,aa=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#928374;font-style:italic">;; Orderless to get better completions</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> orderless</span></span>
<span class="line"><span style="color:#D4BE98">  :custom</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#A9B665">completion-styles</span></span>
<span class="line"><span style="color:#D4BE98">   '(basic partial-completion orderless))) </span><span style="color:#928374;font-style:italic">; orderless needs to be last</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Vertico for completion UI</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> vertico</span></span>
<span class="line"><span style="color:#D4BE98">  :init</span></span>
<span class="line"><span style="color:#D4BE98">  (vertico-mode))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Company mode for text completion popup</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> company</span></span>
<span class="line"><span style="color:#D4BE98">  :config</span></span>
<span class="line"><span style="color:#D4BE98">  (global-company-mode t))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Consult for searching, grepping, and project exploration</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> consult)</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> consult-flycheck)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Get detailed popup descriptions</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> marginalia</span></span>
<span class="line"><span style="color:#D4BE98">  :init</span></span>
<span class="line"><span style="color:#D4BE98">  (marginalia-mode))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Keybindings packages and settings</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Which key, in emacs 30 it will just be a "(require 'which-key)"</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> which-key</span></span>
<span class="line"><span style="color:#D4BE98">  :config</span></span>
<span class="line"><span style="color:#D4BE98">  (which-key-mode))</span></span></code></pre>`,$,x,Ns='<a aria-hidden="true" tabindex="-1" href="#global-keybindings"><span class="icon icon-link"></span></a>Global keybindings',hs,K,na=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> general</span></span>
<span class="line"><span style="color:#D4BE98">  :after magit</span></span>
<span class="line"><span style="color:#D4BE98">  :config</span></span>
<span class="line"><span style="color:#D4BE98">  (general-evil-setup)</span></span>
<span class="line"><span style="color:#928374;font-style:italic">  ;; global keybindings</span></span>
<span class="line"><span style="color:#D4BE98">  (general-create-definer global/leader-keys</span></span>
<span class="line"><span style="color:#D4BE98">    :states '(normal insert visual emacs)</span></span>
<span class="line"><span style="color:#D4BE98">    :keymaps 'override</span></span>
<span class="line"><span style="color:#D4BE98">    :prefix </span><span style="color:#D8A657">"SPC"</span></span>
<span class="line"><span style="color:#D4BE98">    :global-prefix </span><span style="color:#D8A657">"C-SPC"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D4BE98">  (global/leader-keys</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    ;; SPC +</span></span>
<span class="line"><span style="color:#D8A657">    "r r"</span><span style="color:#D4BE98"> '(reload-emacs-config :wk </span><span style="color:#D8A657">"reload config"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "b s"</span><span style="color:#D4BE98"> '(consult-buffer :wk </span><span style="color:#D8A657">"consult buffer"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "b k"</span><span style="color:#D4BE98"> '(</span><span style="color:#A9B665">kill-buffer-and-window</span><span style="color:#D4BE98"> :wk </span><span style="color:#D8A657">"kill buffer and window"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "o c"</span><span style="color:#D4BE98"> '(open-config-file :wk </span><span style="color:#D8A657">"open config file"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    ;; use "--" to pass options to </span><span style="color:#D4BE98;font-style:italic">&#96;ripgrep'</span></span>
<span class="line"><span style="color:#D8A657">    "f r"</span><span style="color:#D4BE98"> '(consult-ripgrep :wk </span><span style="color:#D8A657">"consult ripgrep"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "f f"</span><span style="color:#D4BE98"> '(consult-find :wk </span><span style="color:#D8A657">"consult find"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "p s"</span><span style="color:#D4BE98"> '(project-switch-project :wk </span><span style="color:#D8A657">"project switch"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "p k"</span><span style="color:#D4BE98"> '(project-kill-buffers :wk </span><span style="color:#D8A657">"project kill buffers"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "p F"</span><span style="color:#D4BE98"> '(project-forget-project :wk </span><span style="color:#D8A657">"project forget"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "p R"</span><span style="color:#D4BE98"> '(project-remember-projects-under :wk </span><span style="color:#D8A657">"project remember projects under"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "p !"</span><span style="color:#D4BE98"> '(project-shell-command :wk </span><span style="color:#D8A657">"project shell command"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "p &#x26;"</span><span style="color:#D4BE98"> '(project-async-shell-command :wk </span><span style="color:#D8A657">"project async shell command"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "c c"</span><span style="color:#D4BE98"> '(quickrun :wk </span><span style="color:#D8A657">"quickrun"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "c a"</span><span style="color:#D4BE98"> '(quickrun-with-arg :wk </span><span style="color:#D8A657">"quickrun with arg"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "E"</span><span style="color:#D4BE98"> '(consult-flymake :wk </span><span style="color:#D8A657">"consult flymake"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "m"</span><span style="color:#D4BE98"> '(consult-imenu :wk </span><span style="color:#D8A657">"consult imenu"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "g"</span><span style="color:#D4BE98"> '(magit :wk </span><span style="color:#D8A657">"magit"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "/"</span><span style="color:#D4BE98"> '(consult-line :wk </span><span style="color:#D8A657">"consult find line"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "."</span><span style="color:#D4BE98"> '(</span><span style="color:#A9B665">find-file</span><span style="color:#D4BE98"> :wk </span><span style="color:#D8A657">"find file"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    ":"</span><span style="color:#D4BE98"> '(</span><span style="color:#A9B665">execute-extended-command</span><span style="color:#D4BE98"> :wk </span><span style="color:#D8A657">"execute extended command"</span><span style="color:#D4BE98">) </span><span style="color:#928374;font-style:italic">; M-x</span></span>
<span class="line"><span style="color:#D8A657">    "!"</span><span style="color:#D4BE98"> '(</span><span style="color:#A9B665">shell-command</span><span style="color:#D4BE98"> :wk </span><span style="color:#D8A657">"shell command"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D8A657">    "&#x26;"</span><span style="color:#D4BE98"> '(</span><span style="color:#A9B665">async-shell-command</span><span style="color:#D4BE98"> :wk </span><span style="color:#D8A657">"async shell command"</span><span style="color:#D4BE98">)))</span></span></code></pre>`,W,w,Gs='<a aria-hidden="true" tabindex="-1" href="#version-control-git-tooling"><span class="icon icon-link"></span></a>Version control (git) tooling',ks,J,la=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#928374;font-style:italic">;; Version control management</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> magit)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Show where changes are in a vc tracked file</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> git-gutter</span></span>
<span class="line"><span style="color:#D4BE98">  :init</span></span>
<span class="line"><span style="color:#D4BE98">  (global-git-gutter-mode </span><span style="color:#D3869B">+1</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D4BE98">  :config</span></span>
<span class="line"><span style="color:#D4BE98">  (general-nmap 'override</span></span>
<span class="line"><span style="color:#D8A657">    "[g"</span><span style="color:#D4BE98"> 'git-gutter:previous-hunk</span></span>
<span class="line"><span style="color:#D8A657">    "]g"</span><span style="color:#D4BE98"> 'git-gutter:next-hunk))</span></span></code></pre>`,Q,H,$s='<a aria-hidden="true" tabindex="-1" href="#language-tooling"><span class="icon icon-link"></span></a>Language tooling',As,X,ea=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#928374;font-style:italic">;; Running code more dynamically</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> quickrun)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Project configurations</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> project</span></span>
<span class="line"><span style="color:#D4BE98">  :straight </span><span style="color:#D3869B">nil</span></span>
<span class="line"><span style="color:#D4BE98">  :preface</span></span>
<span class="line"><span style="color:#928374;font-style:italic">  ;; find cmake projects</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#7DAEA3">defun</span><span style="color:#A9B665"> project-find-cmake</span><span style="color:#D4BE98"> (dir)</span></span>
<span class="line"><span style="color:#D4BE98">    (</span><span style="color:#A9B665">when-let </span><span style="color:#D4BE98">((</span><span style="color:#A9B665">root </span><span style="color:#D4BE98">(</span><span style="color:#A9B665">locate-dominating-file dir </span><span style="color:#D8A657">"CMakeLists.txt"</span><span style="color:#D4BE98">)))</span></span>
<span class="line"><span style="color:#D4BE98">      (</span><span style="color:#EA6962">cons</span><span style="color:#D4BE98"> '</span><span style="color:#A9B665">cmake-lists root</span><span style="color:#D4BE98">)))</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#A9B665">cl-defmethod</span><span style="color:#D4BE98"> project-root ((project (head cmake-lists)))</span></span>
<span class="line"><span style="color:#D4BE98">    (</span><span style="color:#EA6962">cdr</span><span style="color:#D4BE98"> project))</span></span>
<span class="line"><span style="color:#D4BE98">  :config</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#A9B665">add-hook</span><span style="color:#D4BE98"> 'project-find-functions 'project-find-cmake))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Eglot with limited mini buffer madness</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> eglot</span></span>
<span class="line"><span style="color:#D4BE98">  :straight </span><span style="color:#D3869B">nil</span></span>
<span class="line"><span style="color:#D4BE98">  :custom</span></span>
<span class="line"><span style="color:#D4BE98">  (eldoc-echo-area-use-multiline-p </span><span style="color:#D3869B">nil</span><span style="color:#D4BE98">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Treesitter for syntax</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> treesit</span></span>
<span class="line"><span style="color:#D4BE98">  :straight </span><span style="color:#D3869B">nil</span></span>
<span class="line"><span style="color:#D4BE98">  :config</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> treesit-font-lock-level </span><span style="color:#D3869B">4</span><span style="color:#D4BE98">) </span><span style="color:#928374;font-style:italic">; maximum highlighting</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> major-mode-remap-alist</span></span>
<span class="line"><span style="color:#D4BE98">	'((</span><span style="color:#A9B665">python-mode</span><span style="color:#E78A4E"> .</span><span style="color:#D4BE98"> python-ts-mode)</span></span>
<span class="line"><span style="color:#D4BE98">	  (</span><span style="color:#A9B665">c-mode</span><span style="color:#E78A4E"> .</span><span style="color:#D4BE98"> c-ts-mode))))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">;; Folding for </span><span style="color:#D4BE98;font-style:italic">&#96;treesit'</span><span style="color:#928374;font-style:italic"> supported languages</span></span>
<span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> treesit-fold</span></span>
<span class="line"><span style="color:#D4BE98">  :straight</span></span>
<span class="line"><span style="color:#D4BE98">  (treesit-fold :type git :host github :repo </span><span style="color:#D8A657">"emacs-tree-sitter/treesit-fold"</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D4BE98">  :init</span></span>
<span class="line"><span style="color:#D4BE98">  (global-treesit-fold-mode))</span></span></code></pre>`,Y,_,Ks='<a aria-hidden="true" tabindex="-1" href="#rust-specific-tooling"><span class="icon icon-link"></span></a>Rust specific tooling',bs,Z,pa=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#D4BE98">(</span><span style="color:#A9B665">use-package</span><span style="color:#D4BE98"> rust-mode</span></span>
<span class="line"><span style="color:#D4BE98">  :init</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> rust-mode-form t)</span></span>
<span class="line"><span style="color:#D4BE98">  (</span><span style="color:#E78A4E">setq</span><span style="color:#D4BE98"> rust-mode-treesitter-derive t))</span></span></code></pre>`,ss;return{c(){r=c("nav"),r.innerHTML=xs,as=p(),D=c("h1"),D.innerHTML=ws,ns=p(),B=c("h2"),B.innerHTML=Hs,ls=p(),L=c("p"),L.innerHTML=_s,es=p(),M=c("ol"),M.innerHTML=Ls,ps=p(),T=c("p"),T.textContent=Ms,os=p(),d=c("h2"),d.innerHTML=Ts,ts=p(),u=c("h3"),u.innerHTML=Cs,cs=p(),P=new E(!1),S=p(),f=c("h3"),f.innerHTML=js,is=p(),C=c("ul"),C.innerHTML=qs,rs=p(),m=c("h2"),m.innerHTML=Ps,ys=p(),j=c("ul"),j.innerHTML=Ss,Es=p(),g=c("h2"),g.innerHTML=Rs,Ds=p(),q=c("ul"),q.innerHTML=Fs,Bs=p(),h=c("h2"),h.innerHTML=Os,ds=p(),R=new E(!1),F=p(),k=c("h2"),k.innerHTML=Us,us=p(),O=new E(!1),U=p(),A=c("h2"),A.innerHTML=zs,fs=p(),z=new E(!1),I=p(),b=c("h2"),b.innerHTML=Is,ms=p(),V=new E(!1),N=p(),v=c("h2"),v.innerHTML=Vs,gs=p(),G=new E(!1),$=p(),x=c("h2"),x.innerHTML=Ns,hs=p(),K=new E(!1),W=p(),w=c("h2"),w.innerHTML=Gs,ks=p(),J=new E(!1),Q=p(),H=c("h2"),H.innerHTML=$s,As=p(),X=new E(!1),Y=p(),_=c("h2"),_.innerHTML=Ks,bs=p(),Z=new E(!1),ss=Ws(),this.h()},l(s){r=o(s,"NAV",{class:!0,"data-svelte-h":!0}),t(r)!=="svelte-19uvy1f"&&(r.innerHTML=xs),as=e(s),D=o(s,"H1",{id:!0,"data-svelte-h":!0}),t(D)!=="svelte-4jyqw4"&&(D.innerHTML=ws),ns=e(s),B=o(s,"H2",{id:!0,"data-svelte-h":!0}),t(B)!=="svelte-6ii770"&&(B.innerHTML=Hs),ls=e(s),L=o(s,"P",{"data-svelte-h":!0}),t(L)!=="svelte-24t0oo"&&(L.innerHTML=_s),es=e(s),M=o(s,"OL",{"data-svelte-h":!0}),t(M)!=="svelte-1kwxbmd"&&(M.innerHTML=Ls),ps=e(s),T=o(s,"P",{"data-svelte-h":!0}),t(T)!=="svelte-1ri2z5x"&&(T.textContent=Ms),os=e(s),d=o(s,"H2",{id:!0,"data-svelte-h":!0}),t(d)!=="svelte-b9folw"&&(d.innerHTML=Ts),ts=e(s),u=o(s,"H3",{id:!0,"data-svelte-h":!0}),t(u)!=="svelte-zkx8od"&&(u.innerHTML=Cs),cs=e(s),P=y(s,!1),S=e(s),f=o(s,"H3",{id:!0,"data-svelte-h":!0}),t(f)!=="svelte-17nfcrm"&&(f.innerHTML=js),is=e(s),C=o(s,"UL",{"data-svelte-h":!0}),t(C)!=="svelte-166igdg"&&(C.innerHTML=qs),rs=e(s),m=o(s,"H2",{id:!0,"data-svelte-h":!0}),t(m)!=="svelte-27ps1a"&&(m.innerHTML=Ps),ys=e(s),j=o(s,"UL",{"data-svelte-h":!0}),t(j)!=="svelte-4fgtt3"&&(j.innerHTML=Ss),Es=e(s),g=o(s,"H2",{id:!0,"data-svelte-h":!0}),t(g)!=="svelte-scc5c3"&&(g.innerHTML=Rs),Ds=e(s),q=o(s,"UL",{"data-svelte-h":!0}),t(q)!=="svelte-1hsiz3l"&&(q.innerHTML=Fs),Bs=e(s),h=o(s,"H2",{id:!0,"data-svelte-h":!0}),t(h)!=="svelte-1lw1p6z"&&(h.innerHTML=Os),ds=e(s),R=y(s,!1),F=e(s),k=o(s,"H2",{id:!0,"data-svelte-h":!0}),t(k)!=="svelte-156wla7"&&(k.innerHTML=Us),us=e(s),O=y(s,!1),U=e(s),A=o(s,"H2",{id:!0,"data-svelte-h":!0}),t(A)!=="svelte-1jmhhgu"&&(A.innerHTML=zs),fs=e(s),z=y(s,!1),I=e(s),b=o(s,"H2",{id:!0,"data-svelte-h":!0}),t(b)!=="svelte-znbqel"&&(b.innerHTML=Is),ms=e(s),V=y(s,!1),N=e(s),v=o(s,"H2",{id:!0,"data-svelte-h":!0}),t(v)!=="svelte-q31tdm"&&(v.innerHTML=Vs),gs=e(s),G=y(s,!1),$=e(s),x=o(s,"H2",{id:!0,"data-svelte-h":!0}),t(x)!=="svelte-14sb0ng"&&(x.innerHTML=Ns),hs=e(s),K=y(s,!1),W=e(s),w=o(s,"H2",{id:!0,"data-svelte-h":!0}),t(w)!=="svelte-1x40wy6"&&(w.innerHTML=Gs),ks=e(s),J=y(s,!1),Q=e(s),H=o(s,"H2",{id:!0,"data-svelte-h":!0}),t(H)!=="svelte-1vbqtfa"&&(H.innerHTML=$s),As=e(s),X=y(s,!1),Y=e(s),_=o(s,"H2",{id:!0,"data-svelte-h":!0}),t(_)!=="svelte-1lhk5uu"&&(_.innerHTML=Ks),bs=e(s),Z=y(s,!1),ss=Ws(),this.h()},h(){i(r,"class","toc"),i(D,"id","returning-to-emacs"),i(B,"id","must-haves"),i(d,"id","installation"),i(u,"id","macos"),P.a=S,i(f,"id","linux"),i(m,"id","file-layout"),i(g,"id","essential-packages"),i(h,"id","straightel"),R.a=F,i(k,"id","emacs-configuration"),O.a=U,i(A,"id","use-package-setup-and-integration-with-straight"),z.a=I,i(b,"id","evil-mode-and-associated-packages"),V.a=N,i(v,"id","completion-ui-and-project-searching"),G.a=$,i(x,"id","global-keybindings"),K.a=W,i(w,"id","version-control-git-tooling"),J.a=Q,i(H,"id","language-tooling"),X.a=Y,i(_,"id","rust-specific-tooling"),Z.a=ss},m(s,a){l(s,r,a),l(s,as,a),l(s,D,a),l(s,ns,a),l(s,B,a),l(s,ls,a),l(s,L,a),l(s,es,a),l(s,M,a),l(s,ps,a),l(s,T,a),l(s,os,a),l(s,d,a),l(s,ts,a),l(s,u,a),l(s,cs,a),P.m(Qs,s,a),l(s,S,a),l(s,f,a),l(s,is,a),l(s,C,a),l(s,rs,a),l(s,m,a),l(s,ys,a),l(s,j,a),l(s,Es,a),l(s,g,a),l(s,Ds,a),l(s,q,a),l(s,Bs,a),l(s,h,a),l(s,ds,a),R.m(Xs,s,a),l(s,F,a),l(s,k,a),l(s,us,a),O.m(Ys,s,a),l(s,U,a),l(s,A,a),l(s,fs,a),z.m(Zs,s,a),l(s,I,a),l(s,b,a),l(s,ms,a),V.m(sa,s,a),l(s,N,a),l(s,v,a),l(s,gs,a),G.m(aa,s,a),l(s,$,a),l(s,x,a),l(s,hs,a),K.m(na,s,a),l(s,W,a),l(s,w,a),l(s,ks,a),J.m(la,s,a),l(s,Q,a),l(s,H,a),l(s,As,a),X.m(ea,s,a),l(s,Y,a),l(s,_,a),l(s,bs,a),Z.m(pa,s,a),l(s,ss,a)},p:vs,i:vs,o:vs,d(s){s&&(n(r),n(as),n(D),n(ns),n(B),n(ls),n(L),n(es),n(M),n(ps),n(T),n(os),n(d),n(ts),n(u),n(cs),P.d(),n(S),n(f),n(is),n(C),n(rs),n(m),n(ys),n(j),n(Es),n(g),n(Ds),n(q),n(Bs),n(h),n(ds),R.d(),n(F),n(k),n(us),O.d(),n(U),n(A),n(fs),z.d(),n(I),n(b),n(ms),V.d(),n(N),n(v),n(gs),G.d(),n($),n(x),n(hs),K.d(),n(W),n(w),n(ks),J.d(),n(Q),n(H),n(As),X.d(),n(Y),n(_),n(bs),n(ss),Z.d())}}}const ra={title:"Emacs config, returning into the void",date:"07-04-24"},{title:Da,date:Ba}=ra;class da extends ta{constructor(r){super(),ca(this,r,null,ia,oa,{})}}export{da as default,ra as metadata};
