import{s as Hn,n as Us}from"./scheduler.Bp1JAopm.js";import{S as Ln,i as Mn,e,s as p,H as y,m as yn,c as t,k as c,f as o,n as i,l as r,g as a,d as l}from"./index.D933VBcG.js";function Tn(En){let E,js='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#python-dynamic-programming">Python Dynamic Programming</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#fib">Fib</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#lru-cache">LRU Cache</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#number-of-paths">number of paths</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#climbing-stairs">climbing stairs</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#memoization">memoization</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#dynamic-bottom-up">dynamic bottom up</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#min-path-sum">Min Path Sum</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#coin-change">Coin Change</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#backtracking-with-memoization">backtracking with memoization</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#iterative-dymanic-programming">iterative dymanic programming</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#bfs-solution">bfs solution</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#coin-change-ii-unique-combinations">Coin Change II (unique combinations)</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#top-down-memoization">top down memoization</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#lru_cache-brute-force">lru_cache brute force</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#bottom-up-iteration">bottom up iteration</a></li></ol></li></ol></li></ol>',Bs,B,Is='<a aria-hidden="true" tabindex="-1" href="#python-dynamic-programming"><span class="icon icon-link"></span></a>Python Dynamic Programming',Ds,D,Fs='<a aria-hidden="true" tabindex="-1" href="#fib"><span class="icon icon-link"></span></a>Fib',As,L,Rs="<li>simple example of fib with memoization</li> <li>we use a <em>dictionary</em> as /memo/ which gets passed in so that if the function doesnâ€™t get called with it an empty one will be instantiated</li>",us,S,Bn=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">def</span><span style="color:#A9B665"> fibMemo</span><span style="color:#D4BE98">(n,</span><span style="color:#D4BE98"> memo</span><span style="color:#E78A4E"> =</span><span style="color:#D4BE98"> &#123;&#125;):</span></span>
<span class="line"><span style="color:#EA6962">    if</span><span style="color:#D4BE98"> n </span><span style="color:#E78A4E">==</span><span style="color:#D3869B"> 1</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">        return</span><span style="color:#D3869B"> 0</span></span>
<span class="line"><span style="color:#EA6962">    if</span><span style="color:#D4BE98"> n </span><span style="color:#E78A4E">==</span><span style="color:#D3869B"> 2</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">        return</span><span style="color:#D3869B"> 1</span></span>
<span class="line"><span style="color:#EA6962">    if</span><span style="color:#E78A4E"> not</span><span style="color:#D4BE98"> n </span><span style="color:#E78A4E">in</span><span style="color:#D4BE98"> memo:</span></span>
<span class="line"><span style="color:#D4BE98">        memo[n] </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> fibMemo</span><span style="color:#D4BE98">(n</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">, memo) </span><span style="color:#E78A4E">+</span><span style="color:#A9B665"> fibMemo</span><span style="color:#D4BE98">(n</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">2</span><span style="color:#D4BE98">, memo)</span></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#D4BE98"> memo[n]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic"># if you dont use &#96;memo = &#123;&#125;&#96; pass in &#96;tempDict = &#123;&#125;&#96; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A9B665">print</span><span style="color:#D4BE98">(</span><span style="color:#A9B665">fibMemo</span><span style="color:#D4BE98">(</span><span style="color:#D3869B">10</span><span style="color:#D4BE98">))</span></span></code></pre>`,U,A,Os='<a aria-hidden="true" tabindex="-1" href="#lru-cache"><span class="icon icon-link"></span></a>LRU Cache',ms,M,Vs="<li>least recently used cache</li>",fs,j,Dn=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#928374;font-style:italic"># fib example (iterative with array)</span></span>
<span class="line"><span style="color:#EA6962">def</span><span style="color:#A9B665"> fib_arr</span><span style="color:#D4BE98">(n:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">):</span></span>
<span class="line"><span style="color:#D4BE98">    mem </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> [</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">, </span><span style="color:#D3869B">1</span><span style="color:#D4BE98">]</span></span>
<span class="line"><span style="color:#EA6962">    for</span><span style="color:#D4BE98"> i </span><span style="color:#EA6962">in</span><span style="color:#A9B665"> range</span><span style="color:#D4BE98">(</span><span style="color:#D3869B">2</span><span style="color:#D4BE98">, n</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">):</span></span>
<span class="line"><span style="color:#D4BE98">        mem</span><span style="color:#928374">.</span><span style="color:#A9B665">append</span><span style="color:#D4BE98">(mem[</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">2</span><span style="color:#D4BE98">] </span><span style="color:#E78A4E">+</span><span style="color:#D4BE98"> mem[</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">])</span></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#D4BE98"> mem[</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A9B665">print</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">'fib_arr(32) => %d'</span><span style="color:#E78A4E"> %</span><span style="color:#A9B665"> fib_arr</span><span style="color:#D4BE98">(</span><span style="color:#D3869B">32</span><span style="color:#D4BE98">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic"># allows niave recursive to store previous calculations</span></span>
<span class="line"><span style="color:#928374;font-style:italic"># should offer dp performance</span></span>
<span class="line"><span style="color:#D3869B">from</span><span style="color:#D4BE98"> functools </span><span style="color:#D3869B">import</span><span style="color:#D4BE98"> lru_cache</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374">@</span><span style="color:#A9B665">lru_cache</span><span style="color:#D4BE98">(maxsize</span><span style="color:#E78A4E">=</span><span style="color:#89B482">None</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#EA6962">def</span><span style="color:#A9B665"> fib_niave</span><span style="color:#D4BE98">(n):</span></span>
<span class="line"><span style="color:#EA6962">    if</span><span style="color:#D4BE98"> n </span><span style="color:#E78A4E">&#x3C;=</span><span style="color:#D3869B"> 1</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">        return</span><span style="color:#D4BE98"> n</span></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#A9B665"> fib_niave</span><span style="color:#D4BE98">(n</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">) </span><span style="color:#E78A4E">+</span><span style="color:#A9B665"> fib_niave</span><span style="color:#D4BE98">(n</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">2</span><span style="color:#D4BE98">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A9B665">print</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">'fib_niave(32) => %d'</span><span style="color:#E78A4E"> %</span><span style="color:#A9B665"> fib_niave</span><span style="color:#D4BE98">(</span><span style="color:#D3869B">32</span><span style="color:#D4BE98">))</span></span></code></pre>`,I,u,Gs='<a aria-hidden="true" tabindex="-1" href="#number-of-paths"><span class="icon icon-link"></span></a>number of paths',ds,F,An=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">class</span><span style="color:#7DAEA3"> Solution</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # m is number of rows n is number of columns</span></span>
<span class="line"><span style="color:#EA6962">    def</span><span style="color:#A9B665"> uniquePaths</span><span style="color:#D4BE98">(self,</span><span style="color:#D4BE98"> m:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">,</span><span style="color:#D4BE98"> n:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">)</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#D4BE98">        paths </span><span style="color:#E78A4E">=</span><span style="color:#D3869B"> 0</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # grid to save the number of paths from each position</span></span>
<span class="line"><span style="color:#D4BE98">        grid </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> [[</span><span style="color:#D3869B">0</span><span style="color:#EA6962"> for</span><span style="color:#D4BE98"> _ </span><span style="color:#EA6962">in</span><span style="color:#A9B665"> range</span><span style="color:#D4BE98">(n)] </span><span style="color:#EA6962">for</span><span style="color:#D4BE98"> _ </span><span style="color:#EA6962">in</span><span style="color:#A9B665"> range</span><span style="color:#D4BE98">(m)]</span></span>
<span class="line"><span style="color:#EA6962">        def</span><span style="color:#A9B665"> bt</span><span style="color:#D4BE98">(x,</span><span style="color:#D4BE98"> y):</span></span>
<span class="line"><span style="color:#EA6962">            if</span><span style="color:#D4BE98"> (x, y) </span><span style="color:#E78A4E">==</span><span style="color:#D4BE98"> (m</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">, n</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">):</span></span>
<span class="line"><span style="color:#EA6962">                return</span><span style="color:#D3869B"> 1</span><span style="color:#928374;font-style:italic">        # one path from x,y to m,n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EA6962">            elif</span><span style="color:#D4BE98"> (</span></span>
<span class="line"><span style="color:#D4BE98">                x </span><span style="color:#E78A4E">>=</span><span style="color:#D4BE98"> m </span><span style="color:#E78A4E">or</span><span style="color:#D4BE98"> </span></span>
<span class="line"><span style="color:#D4BE98">                y </span><span style="color:#E78A4E">>=</span><span style="color:#D4BE98"> n</span></span>
<span class="line"><span style="color:#D4BE98">            ):</span></span>
<span class="line"><span style="color:#EA6962">                return</span><span style="color:#D3869B"> 0</span><span style="color:#928374;font-style:italic"> # no path from x,y to m,n</span></span>
<span class="line"><span style="color:#928374;font-style:italic">            # is the number of paths from here has been calculated return it</span></span>
<span class="line"><span style="color:#EA6962">            if</span><span style="color:#D4BE98"> grid[x][y] </span><span style="color:#E78A4E">!=</span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">: </span></span>
<span class="line"><span style="color:#EA6962">                return</span><span style="color:#D4BE98"> grid[x][y]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">            # calculate the number of paths from x,y to m,n</span></span>
<span class="line"><span style="color:#D4BE98">            grid[x][y] </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> bt</span><span style="color:#D4BE98">(x</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">, y) </span><span style="color:#E78A4E">+</span><span style="color:#A9B665"> bt</span><span style="color:#D4BE98">(x, y</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">            # return number of paths from x,y</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D4BE98"> grid[x][y]</span></span>
<span class="line"><span style="color:#EA6962">        return</span><span style="color:#A9B665"> bt</span><span style="color:#D4BE98">(</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">, </span><span style="color:#D3869B">0</span><span style="color:#D4BE98">)</span></span></code></pre>`,R,m,Js='<a aria-hidden="true" tabindex="-1" href="#climbing-stairs"><span class="icon icon-link"></span></a>climbing stairs',hs,f,Ks='<a aria-hidden="true" tabindex="-1" href="#memoization"><span class="icon icon-link"></span></a>memoization',bs,O,un=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">class</span><span style="color:#7DAEA3"> Solution</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">    def</span><span style="color:#A9B665"> climbStairs</span><span style="color:#D4BE98">(self,</span><span style="color:#D4BE98"> n:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">)</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#D4BE98">        arr </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> [</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">1</span><span style="color:#EA6962"> for</span><span style="color:#D4BE98"> _ </span><span style="color:#EA6962">in</span><span style="color:#A9B665"> range</span><span style="color:#D4BE98">(n)]</span></span>
<span class="line"><span style="color:#EA6962">        def</span><span style="color:#A9B665"> run</span><span style="color:#D4BE98">(N):</span></span>
<span class="line"><span style="color:#928374;font-style:italic">            # reached the top</span></span>
<span class="line"><span style="color:#EA6962">            if</span><span style="color:#D4BE98"> N </span><span style="color:#E78A4E">==</span><span style="color:#D4BE98"> n:</span></span>
<span class="line"><span style="color:#EA6962">                return</span><span style="color:#D3869B"> 1</span></span>
<span class="line"><span style="color:#928374;font-style:italic">            # no path to the top</span></span>
<span class="line"><span style="color:#EA6962">            if</span><span style="color:#D4BE98"> N </span><span style="color:#E78A4E">>=</span><span style="color:#D4BE98"> n:</span></span>
<span class="line"><span style="color:#EA6962">                return</span><span style="color:#D3869B"> 0</span></span>
<span class="line"><span style="color:#928374;font-style:italic">            # check if the 'step' has been visited</span></span>
<span class="line"><span style="color:#EA6962">            if</span><span style="color:#D4BE98"> arr[N] </span><span style="color:#E78A4E">!=</span><span style="color:#E78A4E"> -</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">                return</span><span style="color:#D4BE98"> arr[N]</span></span>
<span class="line"><span style="color:#928374;font-style:italic">            # find number of steps from step 'N'</span></span>
<span class="line"><span style="color:#D4BE98">            arr[N] </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> run</span><span style="color:#D4BE98">(N</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">) </span><span style="color:#E78A4E">+</span><span style="color:#A9B665"> run</span><span style="color:#D4BE98">(N</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">2</span><span style="color:#D4BE98">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">            # return number of steps from 'N'</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D4BE98"> arr[N]</span></span>
<span class="line"><span style="color:#EA6962">        return</span><span style="color:#A9B665"> run</span><span style="color:#D4BE98">(</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">)</span></span></code></pre>`,V,T,Qs="<li>lru cache version</li>",xs,G,mn=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#D3869B">from</span><span style="color:#D4BE98"> functools </span><span style="color:#D3869B">import</span><span style="color:#D4BE98"> lru_cache</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374">@</span><span style="color:#A9B665">lru_cache</span><span style="color:#D4BE98">(maxsize</span><span style="color:#E78A4E">=</span><span style="color:#89B482">None</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#EA6962">def</span><span style="color:#A9B665"> climbStairs</span><span style="color:#D4BE98">(n:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">)</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">    def</span><span style="color:#A9B665"> dfs</span><span style="color:#D4BE98">(cur):</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> cur </span><span style="color:#E78A4E">==</span><span style="color:#D4BE98"> n:</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D3869B"> 1</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> cur </span><span style="color:#E78A4E">></span><span style="color:#D4BE98"> n:</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D3869B"> 0</span></span>
<span class="line"><span style="color:#EA6962">        return</span><span style="color:#A9B665"> dfs</span><span style="color:#D4BE98">(cur</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">) </span><span style="color:#E78A4E">+</span><span style="color:#A9B665"> dfs</span><span style="color:#D4BE98">(cur</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">2</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#A9B665"> dfs</span><span style="color:#D4BE98">(</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">)</span></span></code></pre>`,J,d,Ws='<a aria-hidden="true" tabindex="-1" href="#dynamic-bottom-up"><span class="icon icon-link"></span></a>dynamic bottom up',vs,K,fn=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">def</span><span style="color:#A9B665"> climbStairs</span><span style="color:#D4BE98">(n:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">)</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">    if</span><span style="color:#D4BE98"> n </span><span style="color:#E78A4E">==</span><span style="color:#D3869B"> 1</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">        return</span><span style="color:#D3869B"> 1</span></span>
<span class="line"><span style="color:#D4BE98">    dp </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> [</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">] </span><span style="color:#E78A4E">*</span><span style="color:#D4BE98"> (n</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D4BE98">    dp[</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">] </span><span style="color:#E78A4E">=</span><span style="color:#D3869B"> 1</span></span>
<span class="line"><span style="color:#D4BE98">    dp[</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">] </span><span style="color:#E78A4E">=</span><span style="color:#D3869B"> 1</span></span>
<span class="line"><span style="color:#EA6962">    for</span><span style="color:#D4BE98"> i </span><span style="color:#EA6962">in</span><span style="color:#A9B665"> range</span><span style="color:#D4BE98">(</span><span style="color:#D3869B">2</span><span style="color:#D4BE98">,n</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">):</span></span>
<span class="line"><span style="color:#EA6962">        for</span><span style="color:#D4BE98"> s </span><span style="color:#EA6962">in</span><span style="color:#D4BE98"> [</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">,</span><span style="color:#D3869B">2</span><span style="color:#D4BE98">]:</span></span>
<span class="line"><span style="color:#EA6962">            if</span><span style="color:#D4BE98"> i </span><span style="color:#E78A4E">-</span><span style="color:#D4BE98"> s </span><span style="color:#E78A4E">></span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#D4BE98">                dp[i] </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> dp[i</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">] </span><span style="color:#E78A4E">+</span><span style="color:#D4BE98"> dp[i</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">2</span><span style="color:#D4BE98">]</span></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#D4BE98"> dp[n]</span></span></code></pre>`,Q,h,Xs='<a aria-hidden="true" tabindex="-1" href="#min-path-sum"><span class="icon icon-link"></span></a>Min Path Sum',_s,W,dn=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">def</span><span style="color:#A9B665"> minPathSum</span><span style="color:#D4BE98">(grid:</span><span style="color:#A9B665"> list</span><span style="color:#D4BE98">[</span><span style="color:#A9B665">list</span><span style="color:#D4BE98">[</span><span style="color:#7DAEA3">int</span><span style="color:#D4BE98">]])</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#D4BE98">    memo </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> &#123;&#125;</span></span>
<span class="line"><span style="color:#D4BE98">    memo[(</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">,</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">)] </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> grid[</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">][</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">]</span></span>
<span class="line"><span style="color:#EA6962">    for</span><span style="color:#D4BE98"> x </span><span style="color:#EA6962">in</span><span style="color:#A9B665"> range</span><span style="color:#D4BE98">(</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">, </span><span style="color:#A9B665">len</span><span style="color:#D4BE98">(grid)):</span></span>
<span class="line"><span style="color:#EA6962">        for</span><span style="color:#D4BE98"> y </span><span style="color:#EA6962">in</span><span style="color:#A9B665"> range</span><span style="color:#D4BE98">(</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">, </span><span style="color:#A9B665">len</span><span style="color:#D4BE98">(grid[</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">])):</span></span>
<span class="line"><span style="color:#EA6962">            if</span><span style="color:#D4BE98"> (x,y) </span><span style="color:#E78A4E">in</span><span style="color:#D4BE98"> memo:</span></span>
<span class="line"><span style="color:#EA6962">                continue</span></span>
<span class="line"><span style="color:#EA6962">            else</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">                if</span><span style="color:#D4BE98"> x </span><span style="color:#E78A4E">></span><span style="color:#D3869B"> 0</span><span style="color:#E78A4E"> and</span><span style="color:#D4BE98"> y </span><span style="color:#E78A4E">></span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#D4BE98">                    memo[(x,y)] </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> min</span><span style="color:#D4BE98">(memo[(x</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">, y)], memo[(x, y</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">)]) </span><span style="color:#E78A4E">+</span><span style="color:#D4BE98"> grid[x][y]</span></span>
<span class="line"><span style="color:#EA6962">                elif</span><span style="color:#D4BE98"> x </span><span style="color:#E78A4E">></span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#D4BE98">                    memo[(x,y)] </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> memo[(x</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">, y)] </span><span style="color:#E78A4E">+</span><span style="color:#D4BE98"> grid[x][y]</span></span>
<span class="line"><span style="color:#EA6962">                elif</span><span style="color:#D4BE98"> y </span><span style="color:#E78A4E">></span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#D4BE98">                    memo[(x,y)] </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> memo[(x, y</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">)] </span><span style="color:#E78A4E">+</span><span style="color:#D4BE98"> grid[x][y]</span></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#D4BE98"> memo[(</span><span style="color:#A9B665">len</span><span style="color:#D4BE98">(grid)</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">, </span><span style="color:#A9B665">len</span><span style="color:#D4BE98">(grid[</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">])</span><span style="color:#E78A4E">-</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4BE98">grid </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> [[</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">,</span><span style="color:#D3869B">3</span><span style="color:#D4BE98">,</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">], [</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">,</span><span style="color:#D3869B">5</span><span style="color:#D4BE98">,</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">], [</span><span style="color:#D3869B">4</span><span style="color:#D4BE98">,</span><span style="color:#D3869B">2</span><span style="color:#D4BE98">,</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A9B665">print</span><span style="color:#D4BE98">(</span><span style="color:#A9B665">minPathSum</span><span style="color:#D4BE98">(grid))</span></span></code></pre>`,X,b,Ys='<a aria-hidden="true" tabindex="-1" href="#coin-change"><span class="icon icon-link"></span></a>Coin Change',ks,x,Zs='<a aria-hidden="true" tabindex="-1" href="#backtracking-with-memoization"><span class="icon icon-link"></span></a>backtracking with memoization',gs,C,$s="<li>bottom up kindof (still memoization)</li>",ws,Y,hn=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">def</span><span style="color:#A9B665"> coinChange</span><span style="color:#D4BE98">(coins:</span><span style="color:#A9B665"> list</span><span style="color:#D4BE98">[</span><span style="color:#7DAEA3">int</span><span style="color:#D4BE98">],</span><span style="color:#D4BE98"> amount:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">)</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # memoization</span></span>
<span class="line"><span style="color:#D4BE98">    memo </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> &#123;&#125;</span></span>
<span class="line"><span style="color:#EA6962">    def</span><span style="color:#A9B665"> bt</span><span style="color:#D4BE98">(cur:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">)</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # we got to our goal</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> cur </span><span style="color:#E78A4E">==</span><span style="color:#D4BE98"> amount:</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D3869B"> 0</span><span style="color:#928374;font-style:italic"> # no more steps</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> cur </span><span style="color:#E78A4E">></span><span style="color:#D4BE98"> amount:</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D4BE98"> amount </span><span style="color:#E78A4E">+</span><span style="color:#D3869B"> 1</span><span style="color:#928374;font-style:italic"> # unreachable</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # use previous calculation</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> cur </span><span style="color:#E78A4E">in</span><span style="color:#D4BE98"> memo:</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D4BE98"> memo[cur]</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # remember the minimum steps to get to cur</span></span>
<span class="line"><span style="color:#D4BE98">        memo[cur] </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> min</span><span style="color:#D4BE98">(</span><span style="color:#A9B665">bt</span><span style="color:#D4BE98">(cur</span><span style="color:#E78A4E">+</span><span style="color:#D4BE98">c)</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#EA6962"> for</span><span style="color:#D4BE98"> c </span><span style="color:#EA6962">in</span><span style="color:#D4BE98"> coins)</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # return the calculation for cur</span></span>
<span class="line"><span style="color:#EA6962">        return</span><span style="color:#D4BE98"> memo[cur]</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # call helper function</span></span>
<span class="line"><span style="color:#D4BE98">    result </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> bt</span><span style="color:#D4BE98">(</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # handle base cases</span></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#E78A4E"> -</span><span style="color:#D3869B">1</span><span style="color:#EA6962"> if</span><span style="color:#D4BE98"> result </span><span style="color:#E78A4E">></span><span style="color:#D4BE98"> amount </span><span style="color:#EA6962">else</span><span style="color:#D4BE98"> result</span></span></code></pre>`,Z,z,sn="<li>more traditional top down recursive memoization</li>",Hs,$,bn=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">def</span><span style="color:#A9B665"> coinChange</span><span style="color:#D4BE98">(coins:</span><span style="color:#A9B665"> list</span><span style="color:#D4BE98">[</span><span style="color:#7DAEA3">int</span><span style="color:#D4BE98">],</span><span style="color:#D4BE98"> amount:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">)</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # memoization</span></span>
<span class="line"><span style="color:#D4BE98">    memo </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> &#123;&#125;</span></span>
<span class="line"><span style="color:#EA6962">    def</span><span style="color:#A9B665"> bt</span><span style="color:#D4BE98">(cur:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">)</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # we got to our goal</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> cur </span><span style="color:#E78A4E">==</span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D3869B"> 0</span><span style="color:#928374;font-style:italic"> # no more steps</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> cur </span><span style="color:#E78A4E">&#x3C;</span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D4BE98"> amount </span><span style="color:#E78A4E">+</span><span style="color:#D3869B"> 1</span><span style="color:#928374;font-style:italic"> # unreachable</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # use previous calculation</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> cur </span><span style="color:#E78A4E">in</span><span style="color:#D4BE98"> memo:</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D4BE98"> memo[cur]</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # remember the minimum steps to get to cur</span></span>
<span class="line"><span style="color:#D4BE98">        memo[cur] </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> min</span><span style="color:#D4BE98">(</span><span style="color:#A9B665">bt</span><span style="color:#D4BE98">(cur</span><span style="color:#E78A4E">-</span><span style="color:#D4BE98">c)</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#EA6962"> for</span><span style="color:#D4BE98"> c </span><span style="color:#EA6962">in</span><span style="color:#D4BE98"> coins)</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # return the calculation for cur</span></span>
<span class="line"><span style="color:#EA6962">        return</span><span style="color:#D4BE98"> memo[cur]</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # call helper function</span></span>
<span class="line"><span style="color:#D4BE98">    result </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> bt</span><span style="color:#D4BE98">(amount)</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # handle base cases</span></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#E78A4E"> -</span><span style="color:#D3869B">1</span><span style="color:#EA6962"> if</span><span style="color:#D4BE98"> result </span><span style="color:#E78A4E">></span><span style="color:#D4BE98"> amount </span><span style="color:#EA6962">else</span><span style="color:#D4BE98"> result</span></span></code></pre>`,ss,v,nn='<a aria-hidden="true" tabindex="-1" href="#iterative-dymanic-programming"><span class="icon icon-link"></span></a>iterative dymanic programming',Ls,q,an="<li>using two for loops</li>",Ms,ns,xn=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">def</span><span style="color:#A9B665"> coinChange</span><span style="color:#D4BE98">(coins:</span><span style="color:#A9B665"> List</span><span style="color:#D4BE98">[</span><span style="color:#7DAEA3">int</span><span style="color:#D4BE98">],</span><span style="color:#D4BE98"> amount:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">)</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # dp[i] := fewest # Of coins to make up i</span></span>
<span class="line"><span style="color:#D4BE98">    dp </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> [</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">] </span><span style="color:#E78A4E">+</span><span style="color:#D4BE98"> [amount </span><span style="color:#E78A4E">+</span><span style="color:#D3869B"> 1</span><span style="color:#D4BE98">] </span><span style="color:#E78A4E">*</span><span style="color:#D4BE98"> amount</span></span>
<span class="line"><span style="color:#EA6962">    for</span><span style="color:#D4BE98"> coin </span><span style="color:#EA6962">in</span><span style="color:#D4BE98"> coins:</span></span>
<span class="line"><span style="color:#EA6962">        for</span><span style="color:#D4BE98"> i </span><span style="color:#EA6962">in</span><span style="color:#A9B665"> range</span><span style="color:#D4BE98">(coin, amount </span><span style="color:#E78A4E">+</span><span style="color:#D3869B"> 1</span><span style="color:#D4BE98">):</span></span>
<span class="line"><span style="color:#D4BE98">          dp[i] </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> min</span><span style="color:#D4BE98">(dp[i], dp[i </span><span style="color:#E78A4E">-</span><span style="color:#D4BE98"> coin] </span><span style="color:#E78A4E">+</span><span style="color:#D3869B"> 1</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#E78A4E"> -</span><span style="color:#D3869B">1</span><span style="color:#EA6962"> if</span><span style="color:#D4BE98"> dp[amount] </span><span style="color:#E78A4E">==</span><span style="color:#D4BE98"> amount </span><span style="color:#E78A4E">+</span><span style="color:#D3869B"> 1</span><span style="color:#EA6962"> else</span><span style="color:#D4BE98"> dp[amount]</span></span></code></pre>`,as,N,ln="<li>using list comprehension</li>",Ts,ls,vn=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">def</span><span style="color:#A9B665"> coinChange</span><span style="color:#D4BE98">(coins:</span><span style="color:#A9B665"> list</span><span style="color:#D4BE98">[</span><span style="color:#7DAEA3">int</span><span style="color:#D4BE98">],</span><span style="color:#D4BE98"> amount:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">)</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # init dp array</span></span>
<span class="line"><span style="color:#D4BE98">    dp </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> [amount</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">] </span><span style="color:#E78A4E">*</span><span style="color:#D4BE98"> (amount</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D4BE98">    dp[</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">] </span><span style="color:#E78A4E">=</span><span style="color:#D3869B"> 0</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # for all subproblems (bottom up)</span></span>
<span class="line"><span style="color:#EA6962">    for</span><span style="color:#D4BE98"> i </span><span style="color:#EA6962">in</span><span style="color:#A9B665"> range</span><span style="color:#D4BE98">(</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">, amount</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">):</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # min of current sub problem and all other choices of coin</span></span>
<span class="line"><span style="color:#D4BE98">        dp[i] </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> min</span><span style="color:#D4BE98">(</span></span>
<span class="line"><span style="color:#D4BE98">            [dp[i]] </span><span style="color:#E78A4E">+</span><span style="color:#D4BE98"> [ dp[i</span><span style="color:#E78A4E">-</span><span style="color:#D4BE98">c]</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#EA6962"> for</span><span style="color:#D4BE98"> c </span><span style="color:#EA6962">in</span><span style="color:#D4BE98"> coins </span><span style="color:#EA6962">if</span><span style="color:#D4BE98"> i</span><span style="color:#E78A4E">-</span><span style="color:#D4BE98">c </span><span style="color:#E78A4E">>=</span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98"> ]</span></span>
<span class="line"><span style="color:#D4BE98">        )</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # return answer to largest subproblem</span></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#D4BE98"> dp[amount]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8A657">"""</span></span>
<span class="line"><span style="color:#D8A657">ie if we have coin 4</span></span>
<span class="line"><span style="color:#D8A657">coin = 4</span></span>
<span class="line"><span style="color:#D8A657">cur_amount = 7</span></span>
<span class="line"><span style="color:#D8A657">dp[7] = 1 + dp[7-3] = 1 + dp[3]</span></span>
<span class="line"><span style="color:#D8A657">ie it takes 1 step with coin 4 to go from 3 to 7</span></span>
<span class="line"><span style="color:#D8A657">"""</span></span></code></pre>`,ps,_,pn='<a aria-hidden="true" tabindex="-1" href="#bfs-solution"><span class="icon icon-link"></span></a>bfs solution',Cs,P,on="<li>using breadth first search we get a similar effect to top down memoization</li>",zs,os,_n=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#D3869B">from</span><span style="color:#D4BE98"> collections </span><span style="color:#D3869B">import</span><span style="color:#D4BE98"> deque</span></span>
<span class="line"><span style="color:#D3869B">from</span><span style="color:#D4BE98"> typing </span><span style="color:#D3869B">import</span><span style="color:#D4BE98"> Deque, Tuple</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EA6962">def</span><span style="color:#A9B665"> coinChange</span><span style="color:#D4BE98">(coins:</span><span style="color:#A9B665"> list</span><span style="color:#D4BE98">[</span><span style="color:#7DAEA3">int</span><span style="color:#D4BE98">],</span><span style="color:#D4BE98"> amount:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">)</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # init queue of next nodes</span></span>
<span class="line"><span style="color:#A9B665">    next</span><span style="color:#D4BE98">: Deque[Tuple[</span><span style="color:#7DAEA3">int</span><span style="color:#D4BE98">, </span><span style="color:#7DAEA3">int</span><span style="color:#D4BE98">]] </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> deque</span><span style="color:#D4BE98">([(amount,</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">)])</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # init set of visited nodes</span></span>
<span class="line"><span style="color:#D4BE98">    seen </span><span style="color:#E78A4E">=</span><span style="color:#7DAEA3"> set</span><span style="color:#D4BE98">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">    # essentially top down iteration</span></span>
<span class="line"><span style="color:#EA6962">    while</span><span style="color:#A9B665"> next</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#D4BE98">        cur, n_coins </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> next</span><span style="color:#928374">.</span><span style="color:#A9B665">popleft</span><span style="color:#D4BE98">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">        # check base case</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> cur </span><span style="color:#E78A4E">==</span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D4BE98"> n_coins</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # for every available coin</span></span>
<span class="line"><span style="color:#EA6962">        for</span><span style="color:#D4BE98"> c </span><span style="color:#EA6962">in</span><span style="color:#D4BE98"> coins:</span></span>
<span class="line"><span style="color:#928374;font-style:italic">            # current value minus selected coin</span></span>
<span class="line"><span style="color:#D4BE98">            new_cur </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> cur </span><span style="color:#E78A4E">-</span><span style="color:#D4BE98"> c</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">            # check for base case or invalid cur</span></span>
<span class="line"><span style="color:#EA6962">            if</span><span style="color:#D4BE98"> new_cur </span><span style="color:#E78A4E">in</span><span style="color:#D4BE98"> seen </span><span style="color:#E78A4E">or</span><span style="color:#D4BE98"> new_cur </span><span style="color:#E78A4E">&#x3C;</span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">                continue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">            # later we check reduced cur with one more coin</span></span>
<span class="line"><span style="color:#A9B665">            next</span><span style="color:#928374">.</span><span style="color:#A9B665">append</span><span style="color:#D4BE98">((new_cur, n_coins</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">)) </span></span>
<span class="line"><span style="color:#928374;font-style:italic">            # we have now seen this number of coins used</span></span>
<span class="line"><span style="color:#D4BE98">            seen</span><span style="color:#928374">.</span><span style="color:#A9B665">add</span><span style="color:#D4BE98">(new_cur)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#E78A4E"> -</span><span style="color:#D3869B">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A9B665">print</span><span style="color:#D4BE98">(</span><span style="color:#A9B665">coinChange</span><span style="color:#D4BE98">([</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">,</span><span style="color:#D3869B">2</span><span style="color:#D4BE98">,</span><span style="color:#D3869B">5</span><span style="color:#D4BE98">], </span><span style="color:#D3869B">11</span><span style="color:#D4BE98">))</span></span></code></pre>`,es,k,en='<a aria-hidden="true" tabindex="-1" href="#coin-change-ii-unique-combinations"><span class="icon icon-link"></span></a>Coin Change II (unique combinations)',qs,g,tn='<a aria-hidden="true" tabindex="-1" href="#top-down-memoization"><span class="icon icon-link"></span></a>top down memoization',Ns,ts,kn=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">def</span><span style="color:#A9B665"> change</span><span style="color:#D4BE98">(amount:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">,</span><span style="color:#D4BE98"> coins:</span><span style="color:#A9B665"> List</span><span style="color:#D4BE98">[</span><span style="color:#7DAEA3">int</span><span style="color:#D4BE98">])</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # init memo dictionary</span></span>
<span class="line"><span style="color:#D4BE98">    memo </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EA6962">    def</span><span style="color:#A9B665"> recursive_change</span><span style="color:#D4BE98">(amount,</span><span style="color:#D4BE98"> index):</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> amount </span><span style="color:#E78A4E">==</span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D3869B"> 1</span><span style="color:#928374;font-style:italic">  # answer reached</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> amount </span><span style="color:#E78A4E">&#x3C;</span><span style="color:#D3869B"> 0</span><span style="color:#E78A4E"> or</span><span style="color:#D4BE98"> index </span><span style="color:#E78A4E">==</span><span style="color:#A9B665"> len</span><span style="color:#D4BE98">(coins):</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D3869B"> 0</span><span style="color:#928374;font-style:italic">  # no answer possible</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">        # have we solved the current subproblem</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> (amount, index) </span><span style="color:#E78A4E">in</span><span style="color:#D4BE98"> memo:</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D4BE98"> memo[(amount, index)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">        # include the current coin</span></span>
<span class="line"><span style="color:#D4BE98">        include_current </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> recursive_change</span><span style="color:#D4BE98">(amount </span><span style="color:#E78A4E">-</span><span style="color:#D4BE98"> coins[index], index)</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # exclude current coin</span></span>
<span class="line"><span style="color:#D4BE98">        exclude_current </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> recursive_change</span><span style="color:#D4BE98">(amount, index </span><span style="color:#E78A4E">+</span><span style="color:#D3869B"> 1</span><span style="color:#D4BE98">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">        # sum the unique ways to get to current amount w/ or w/o current coin</span></span>
<span class="line"><span style="color:#D4BE98">        memo[(amount, index)] </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> include_current </span><span style="color:#E78A4E">+</span><span style="color:#D4BE98"> exclude_current</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">        # return answer to current subproblem</span></span>
<span class="line"><span style="color:#EA6962">        return</span><span style="color:#D4BE98"> memo[(amount, index)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#A9B665"> recursive_change</span><span style="color:#D4BE98">(amount, </span><span style="color:#D3869B">0</span><span style="color:#D4BE98">)</span></span></code></pre>`,cs,w,cn='<a aria-hidden="true" tabindex="-1" href="#lru_cache-brute-force"><span class="icon icon-link"></span></a>lru_cache brute force',Ps,rs,gn=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#D3869B">from</span><span style="color:#D4BE98"> functools </span><span style="color:#D3869B">import</span><span style="color:#D4BE98"> lru_cache</span></span>
<span class="line"><span style="color:#EA6962">def</span><span style="color:#A9B665"> change</span><span style="color:#D4BE98">(amount:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">,</span><span style="color:#D4BE98"> coins:</span><span style="color:#A9B665"> List</span><span style="color:#D4BE98">[</span><span style="color:#7DAEA3">int</span><span style="color:#D4BE98">])</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#928374">    @</span><span style="color:#A9B665">lru_cache</span><span style="color:#D4BE98">(maxsize</span><span style="color:#E78A4E">=</span><span style="color:#89B482">None</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#EA6962">    def</span><span style="color:#A9B665"> recursive_change</span><span style="color:#D4BE98">(amount,</span><span style="color:#D4BE98"> index):</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> amount </span><span style="color:#E78A4E">==</span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D3869B"> 1</span><span style="color:#928374;font-style:italic">  # answer reached</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> amount </span><span style="color:#E78A4E">&#x3C;</span><span style="color:#D3869B"> 0</span><span style="color:#E78A4E"> or</span><span style="color:#D4BE98"> index </span><span style="color:#E78A4E">==</span><span style="color:#A9B665"> len</span><span style="color:#D4BE98">(coins):</span></span>
<span class="line"><span style="color:#EA6962">            return</span><span style="color:#D3869B"> 0</span><span style="color:#928374;font-style:italic">  # no answer possible</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">        # all of these recursive calls are saved by lru_cache</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # include the current coin</span></span>
<span class="line"><span style="color:#D4BE98">        include_current </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> recursive_change</span><span style="color:#D4BE98">(amount </span><span style="color:#E78A4E">-</span><span style="color:#D4BE98"> coins[index], index)</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # exclude current coin</span></span>
<span class="line"><span style="color:#D4BE98">        exclude_current </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> recursive_change</span><span style="color:#D4BE98">(amount, index </span><span style="color:#E78A4E">+</span><span style="color:#D3869B"> 1</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        # ---------------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EA6962">        return</span><span style="color:#D4BE98"> include_current </span><span style="color:#E78A4E">+</span><span style="color:#D4BE98"> exclude_current</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#A9B665"> recursive_change</span><span style="color:#D4BE98">(amount, </span><span style="color:#D3869B">0</span><span style="color:#D4BE98">)</span></span></code></pre>`,ys,H,rn='<a aria-hidden="true" tabindex="-1" href="#bottom-up-iteration"><span class="icon icon-link"></span></a>bottom up iteration',Ss,is,wn=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">def</span><span style="color:#A9B665"> change</span><span style="color:#D4BE98">(self,</span><span style="color:#D4BE98"> amount:</span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">,</span><span style="color:#D4BE98"> coins:</span><span style="color:#A9B665"> List</span><span style="color:#D4BE98">[</span><span style="color:#7DAEA3">int</span><span style="color:#D4BE98">])</span><span style="color:#D4BE98"> -></span><span style="color:#7DAEA3"> int</span><span style="color:#D4BE98">:</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # init dp array</span></span>
<span class="line"><span style="color:#D4BE98">    dp </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> [</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">] </span><span style="color:#E78A4E">*</span><span style="color:#D4BE98"> (amount </span><span style="color:#E78A4E">+</span><span style="color:#D3869B"> 1</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # set initial value (base case)</span></span>
<span class="line"><span style="color:#D4BE98">    dp[</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">] </span><span style="color:#E78A4E">=</span><span style="color:#D3869B"> 1</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    # prevent repeating combinations by using the same coin multiple times</span></span>
<span class="line"><span style="color:#EA6962">    for</span><span style="color:#D4BE98"> c </span><span style="color:#EA6962">in</span><span style="color:#D4BE98"> coins:</span></span>
<span class="line"><span style="color:#EA6962">        for</span><span style="color:#D4BE98"> i </span><span style="color:#EA6962">in</span><span style="color:#A9B665"> range</span><span style="color:#D4BE98">(c, amount</span><span style="color:#E78A4E">+</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">):</span></span>
<span class="line"><span style="color:#D4BE98">            dp[i] </span><span style="color:#E78A4E">+=</span><span style="color:#D4BE98"> dp[i</span><span style="color:#E78A4E">-</span><span style="color:#D4BE98">c]</span></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#D4BE98"> dp[amount]</span></span></code></pre>`,Es;return{c(){E=e("nav"),E.innerHTML=js,Bs=p(),B=e("h1"),B.innerHTML=Is,Ds=p(),D=e("h2"),D.innerHTML=Fs,As=p(),L=e("ul"),L.innerHTML=Rs,us=p(),S=new y(!1),U=p(),A=e("h2"),A.innerHTML=Os,ms=p(),M=e("ul"),M.innerHTML=Vs,fs=p(),j=new y(!1),I=p(),u=e("h2"),u.innerHTML=Gs,ds=p(),F=new y(!1),R=p(),m=e("h2"),m.innerHTML=Js,hs=p(),f=e("h3"),f.innerHTML=Ks,bs=p(),O=new y(!1),V=p(),T=e("ul"),T.innerHTML=Qs,xs=p(),G=new y(!1),J=p(),d=e("h3"),d.innerHTML=Ws,vs=p(),K=new y(!1),Q=p(),h=e("h2"),h.innerHTML=Xs,_s=p(),W=new y(!1),X=p(),b=e("h2"),b.innerHTML=Ys,ks=p(),x=e("h3"),x.innerHTML=Zs,gs=p(),C=e("ul"),C.innerHTML=$s,ws=p(),Y=new y(!1),Z=p(),z=e("ul"),z.innerHTML=sn,Hs=p(),$=new y(!1),ss=p(),v=e("h3"),v.innerHTML=nn,Ls=p(),q=e("ul"),q.innerHTML=an,Ms=p(),ns=new y(!1),as=p(),N=e("ul"),N.innerHTML=ln,Ts=p(),ls=new y(!1),ps=p(),_=e("h3"),_.innerHTML=pn,Cs=p(),P=e("ul"),P.innerHTML=on,zs=p(),os=new y(!1),es=p(),k=e("h2"),k.innerHTML=en,qs=p(),g=e("h3"),g.innerHTML=tn,Ns=p(),ts=new y(!1),cs=p(),w=e("h3"),w.innerHTML=cn,Ps=p(),rs=new y(!1),ys=p(),H=e("h3"),H.innerHTML=rn,Ss=p(),is=new y(!1),Es=yn(),this.h()},l(s){E=t(s,"NAV",{class:!0,"data-svelte-h":!0}),c(E)!=="svelte-1lm81rf"&&(E.innerHTML=js),Bs=o(s),B=t(s,"H1",{id:!0,"data-svelte-h":!0}),c(B)!=="svelte-dqgxgy"&&(B.innerHTML=Is),Ds=o(s),D=t(s,"H2",{id:!0,"data-svelte-h":!0}),c(D)!=="svelte-1lakjkn"&&(D.innerHTML=Fs),As=o(s),L=t(s,"UL",{"data-svelte-h":!0}),c(L)!=="svelte-1tqrbuy"&&(L.innerHTML=Rs),us=o(s),S=i(s,!1),U=o(s),A=t(s,"H2",{id:!0,"data-svelte-h":!0}),c(A)!=="svelte-20wozl"&&(A.innerHTML=Os),ms=o(s),M=t(s,"UL",{"data-svelte-h":!0}),c(M)!=="svelte-5fzxff"&&(M.innerHTML=Vs),fs=o(s),j=i(s,!1),I=o(s),u=t(s,"H2",{id:!0,"data-svelte-h":!0}),c(u)!=="svelte-1jpcmvg"&&(u.innerHTML=Gs),ds=o(s),F=i(s,!1),R=o(s),m=t(s,"H2",{id:!0,"data-svelte-h":!0}),c(m)!=="svelte-hprqch"&&(m.innerHTML=Js),hs=o(s),f=t(s,"H3",{id:!0,"data-svelte-h":!0}),c(f)!=="svelte-1p4wrqy"&&(f.innerHTML=Ks),bs=o(s),O=i(s,!1),V=o(s),T=t(s,"UL",{"data-svelte-h":!0}),c(T)!=="svelte-1splq5u"&&(T.innerHTML=Qs),xs=o(s),G=i(s,!1),J=o(s),d=t(s,"H3",{id:!0,"data-svelte-h":!0}),c(d)!=="svelte-11jgonx"&&(d.innerHTML=Ws),vs=o(s),K=i(s,!1),Q=o(s),h=t(s,"H2",{id:!0,"data-svelte-h":!0}),c(h)!=="svelte-p585hg"&&(h.innerHTML=Xs),_s=o(s),W=i(s,!1),X=o(s),b=t(s,"H2",{id:!0,"data-svelte-h":!0}),c(b)!=="svelte-1qsqsg5"&&(b.innerHTML=Ys),ks=o(s),x=t(s,"H3",{id:!0,"data-svelte-h":!0}),c(x)!=="svelte-5cnxbs"&&(x.innerHTML=Zs),gs=o(s),C=t(s,"UL",{"data-svelte-h":!0}),c(C)!=="svelte-1ja9scv"&&(C.innerHTML=$s),ws=o(s),Y=i(s,!1),Z=o(s),z=t(s,"UL",{"data-svelte-h":!0}),c(z)!=="svelte-1sqy3cm"&&(z.innerHTML=sn),Hs=o(s),$=i(s,!1),ss=o(s),v=t(s,"H3",{id:!0,"data-svelte-h":!0}),c(v)!=="svelte-5mswdf"&&(v.innerHTML=nn),Ls=o(s),q=t(s,"UL",{"data-svelte-h":!0}),c(q)!=="svelte-1a918hr"&&(q.innerHTML=an),Ms=o(s),ns=i(s,!1),as=o(s),N=t(s,"UL",{"data-svelte-h":!0}),c(N)!=="svelte-10143t3"&&(N.innerHTML=ln),Ts=o(s),ls=i(s,!1),ps=o(s),_=t(s,"H3",{id:!0,"data-svelte-h":!0}),c(_)!=="svelte-kituq"&&(_.innerHTML=pn),Cs=o(s),P=t(s,"UL",{"data-svelte-h":!0}),c(P)!=="svelte-1q5c05q"&&(P.innerHTML=on),zs=o(s),os=i(s,!1),es=o(s),k=t(s,"H2",{id:!0,"data-svelte-h":!0}),c(k)!=="svelte-1fe16l9"&&(k.innerHTML=en),qs=o(s),g=t(s,"H3",{id:!0,"data-svelte-h":!0}),c(g)!=="svelte-1ugutvj"&&(g.innerHTML=tn),Ns=o(s),ts=i(s,!1),cs=o(s),w=t(s,"H3",{id:!0,"data-svelte-h":!0}),c(w)!=="svelte-1abn27z"&&(w.innerHTML=cn),Ps=o(s),rs=i(s,!1),ys=o(s),H=t(s,"H3",{id:!0,"data-svelte-h":!0}),c(H)!=="svelte-h2ldj7"&&(H.innerHTML=rn),Ss=o(s),is=i(s,!1),Es=yn(),this.h()},h(){r(E,"class","toc"),r(B,"id","python-dynamic-programming"),r(D,"id","fib"),S.a=U,r(A,"id","lru-cache"),j.a=I,r(u,"id","number-of-paths"),F.a=R,r(m,"id","climbing-stairs"),r(f,"id","memoization"),O.a=V,G.a=J,r(d,"id","dynamic-bottom-up"),K.a=Q,r(h,"id","min-path-sum"),W.a=X,r(b,"id","coin-change"),r(x,"id","backtracking-with-memoization"),Y.a=Z,$.a=ss,r(v,"id","iterative-dymanic-programming"),ns.a=as,ls.a=ps,r(_,"id","bfs-solution"),os.a=es,r(k,"id","coin-change-ii-unique-combinations"),r(g,"id","top-down-memoization"),ts.a=cs,r(w,"id","lru_cache-brute-force"),rs.a=ys,r(H,"id","bottom-up-iteration"),is.a=Es},m(s,n){a(s,E,n),a(s,Bs,n),a(s,B,n),a(s,Ds,n),a(s,D,n),a(s,As,n),a(s,L,n),a(s,us,n),S.m(Bn,s,n),a(s,U,n),a(s,A,n),a(s,ms,n),a(s,M,n),a(s,fs,n),j.m(Dn,s,n),a(s,I,n),a(s,u,n),a(s,ds,n),F.m(An,s,n),a(s,R,n),a(s,m,n),a(s,hs,n),a(s,f,n),a(s,bs,n),O.m(un,s,n),a(s,V,n),a(s,T,n),a(s,xs,n),G.m(mn,s,n),a(s,J,n),a(s,d,n),a(s,vs,n),K.m(fn,s,n),a(s,Q,n),a(s,h,n),a(s,_s,n),W.m(dn,s,n),a(s,X,n),a(s,b,n),a(s,ks,n),a(s,x,n),a(s,gs,n),a(s,C,n),a(s,ws,n),Y.m(hn,s,n),a(s,Z,n),a(s,z,n),a(s,Hs,n),$.m(bn,s,n),a(s,ss,n),a(s,v,n),a(s,Ls,n),a(s,q,n),a(s,Ms,n),ns.m(xn,s,n),a(s,as,n),a(s,N,n),a(s,Ts,n),ls.m(vn,s,n),a(s,ps,n),a(s,_,n),a(s,Cs,n),a(s,P,n),a(s,zs,n),os.m(_n,s,n),a(s,es,n),a(s,k,n),a(s,qs,n),a(s,g,n),a(s,Ns,n),ts.m(kn,s,n),a(s,cs,n),a(s,w,n),a(s,Ps,n),rs.m(gn,s,n),a(s,ys,n),a(s,H,n),a(s,Ss,n),is.m(wn,s,n),a(s,Es,n)},p:Us,i:Us,o:Us,d(s){s&&(l(E),l(Bs),l(B),l(Ds),l(D),l(As),l(L),l(us),S.d(),l(U),l(A),l(ms),l(M),l(fs),j.d(),l(I),l(u),l(ds),F.d(),l(R),l(m),l(hs),l(f),l(bs),O.d(),l(V),l(T),l(xs),G.d(),l(J),l(d),l(vs),K.d(),l(Q),l(h),l(_s),W.d(),l(X),l(b),l(ks),l(x),l(gs),l(C),l(ws),Y.d(),l(Z),l(z),l(Hs),$.d(),l(ss),l(v),l(Ls),l(q),l(Ms),ns.d(),l(as),l(N),l(Ts),ls.d(),l(ps),l(_),l(Cs),l(P),l(zs),os.d(),l(es),l(k),l(qs),l(g),l(Ns),ts.d(),l(cs),l(w),l(Ps),rs.d(),l(ys),l(H),l(Ss),l(Es),is.d())}}}const qn={title:"Python Dynamic Programming",date:"10-11-10"};class Nn extends Ln{constructor(E){super(),Mn(this,E,null,Tn,Hn,{})}}export{Nn as default,qn as metadata};
