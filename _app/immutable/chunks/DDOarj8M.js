import{s as P,n as N}from"./CrGyUMwP.js";import{S as X,i as Z,d as l,a,k,c as y,l as E,g as e,m as O,n as Q,h as m,j as o,H as R}from"./uW2q-9yC.js";function ss(W){let p,S='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#running-commands-in-nvim">Running commands in NVIM</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#system-and-schedule-functions">‘system’ and ‘schedule’ functions</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#chaining-them-together">Chaining them together</a></li></ol></li></ol></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#example-with-dune-commands">Example with Dune commands</a></li></ol>',g,t,q='<a aria-hidden="true" tabindex="-1" href="#running-commands-in-nvim"><span class="icon icon-link"></span></a>Running commands in NVIM',H,c,I='<a aria-hidden="true" tabindex="-1" href="#system-and-schedule-functions"><span class="icon icon-link"></span></a>‘system’ and ‘schedule’ functions',j,A,U="<li>from the docs</li>",w,D,$=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">function</span><span style="color:#A9B665"> vim.system</span><span style="color:#D4BE98">(cmd:</span><span style="color:#7DAEA3"> string[]</span><span style="color:#D4BE98">,</span><span style="color:#D4BE98"> opts</span><span style="color:#A9B665">?</span><span style="color:#D4BE98">:</span><span style="color:#7DAEA3"> vim.SystemOpts</span><span style="color:#D4BE98">,</span><span style="color:#D4BE98"> on_exit</span><span style="color:#A9B665">?</span><span style="color:#D4BE98">:</span><span style="color:#EA6962"> fun</span><span style="color:#E78A4E">(</span><span style="color:#A9B665">out</span><span style="color:#E78A4E">: </span><span style="color:#7DAEA3">vim.SystemCompleted</span><span style="color:#E78A4E">))</span></span>
<span class="line"><span style="color:#A9B665">  -> </span><span style="color:#7DAEA3">Object</span><span style="color:#E78A4E">: </span><span style="color:#7DAEA3">vim.SystemObj</span></span></code></pre>`,u,d,F="<p>Runs a system command or throws an error if <code>cmd</code> cannot be run.</p>",L,v,Y='<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">function</span><span style="color:#A9B665"> vim.schedule</span><span style="color:#D4BE98">(fn:</span><span style="color:#EA6962"> fun</span><span style="color:#E78A4E">())</span></span></code></pre>',h,B,V="<p>Schedules <code>fn</code> to be invoked soon by the main event-loop. Useful to avoid |textlock| or other temporary restrictions.</p>",T,r,z='<a aria-hidden="true" tabindex="-1" href="#chaining-them-together"><span class="icon icon-link"></span></a>Chaining them together',M,f,G=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#D4BE98">  vim.</span><span style="color:#A9B665">system</span><span style="color:#D4BE98">(&#123; </span><span style="color:#D8A657">"some command" </span><span style="color:#D4BE98">&#125;, &#123; text </span><span style="color:#E78A4E">=</span><span style="color:#89B482"> true</span><span style="color:#D4BE98"> &#125;, </span><span style="color:#EA6962">function</span><span style="color:#D4BE98">(obj)</span></span>
<span class="line"><span style="color:#D4BE98">    vim.</span><span style="color:#A9B665">schedule</span><span style="color:#D4BE98">(</span><span style="color:#EA6962">function</span><span style="color:#D4BE98">()</span></span>
<span class="line"><span style="color:#EA6962">      if</span><span style="color:#E78A4E"> #</span><span style="color:#D4BE98">obj.stderr </span><span style="color:#E78A4E">></span><span style="color:#D3869B"> 0</span><span style="color:#EA6962"> then</span></span>
<span class="line"><span style="color:#D4BE98">        vim.api.</span><span style="color:#A9B665">nvim_notify</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">"Something failed..."</span><span style="color:#D4BE98">, vim.log.levels.ERROR, &#123;&#125;)</span></span>
<span class="line"><span style="color:#EA6962">      end</span></span>
<span class="line"><span style="color:#EA6962">      if</span><span style="color:#E78A4E"> #</span><span style="color:#D4BE98">obj.stdout </span><span style="color:#E78A4E">></span><span style="color:#D3869B"> 0</span><span style="color:#EA6962"> then</span></span>
<span class="line"><span style="color:#D4BE98">        vim.api.</span><span style="color:#A9B665">nvim_notify</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">"Yay it worked..."</span><span style="color:#D4BE98">, vim.log.levels.INFO, &#123;&#125;)</span></span>
<span class="line"><span style="color:#EA6962">      end</span></span>
<span class="line"><span style="color:#EA6962">    end</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#EA6962">  end</span><span style="color:#D4BE98">)</span></span></code></pre>`,_,i,K='<a aria-hidden="true" tabindex="-1" href="#example-with-dune-commands"><span class="icon icon-link"></span></a>Example with Dune commands',C,b,J=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">local</span><span style="color:#EA6962"> function</span><span style="color:#A9B665"> get_project_name</span><span style="color:#D4BE98">(dune_root)</span></span>
<span class="line"><span style="color:#EA6962">  local</span><span style="color:#D4BE98"> handle </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> vim.loop.</span><span style="color:#A9B665">fs_scandir</span><span style="color:#D4BE98">(dune_root)</span></span>
<span class="line"><span style="color:#EA6962">  if</span><span style="color:#D4BE98"> handle </span><span style="color:#EA6962">then</span></span>
<span class="line"><span style="color:#EA6962">    while</span><span style="color:#89B482"> true</span><span style="color:#EA6962"> do</span></span>
<span class="line"><span style="color:#EA6962">      local</span><span style="color:#D4BE98"> name, type </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> vim.loop.</span><span style="color:#A9B665">fs_scandir_next</span><span style="color:#D4BE98">(handle)</span></span>
<span class="line"><span style="color:#EA6962">      if</span><span style="color:#E78A4E"> not</span><span style="color:#D4BE98"> name </span><span style="color:#EA6962">then</span><span style="color:#EA6962"> break</span><span style="color:#EA6962"> end</span></span>
<span class="line"><span style="color:#EA6962">      if</span><span style="color:#A9B665"> type</span><span style="color:#E78A4E"> ==</span><span style="color:#D8A657"> "file" </span><span style="color:#E78A4E">and</span><span style="color:#7DAEA3"> name</span><span style="color:#D4BE98">:</span><span style="color:#A9B665">match</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">"(.+)%.opam$"</span><span style="color:#D4BE98">) </span><span style="color:#EA6962">then</span></span>
<span class="line"><span style="color:#EA6962">        return</span><span style="color:#7DAEA3"> name</span><span style="color:#D4BE98">:</span><span style="color:#A9B665">match</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">"(.+)%.opam$"</span><span style="color:#D4BE98">) </span><span style="color:#928374;font-style:italic">-- Extracts &#x3C;proj_name></span></span>
<span class="line"><span style="color:#EA6962">      end</span></span>
<span class="line"><span style="color:#EA6962">    end</span></span>
<span class="line"><span style="color:#EA6962">  end</span></span>
<span class="line"><span style="color:#EA6962">  return</span><span style="color:#89B482"> nil</span></span>
<span class="line"><span style="color:#EA6962">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EA6962">local</span><span style="color:#EA6962"> function</span><span style="color:#A9B665"> duneExec</span><span style="color:#D4BE98">()</span></span>
<span class="line"><span style="color:#EA6962">  local</span><span style="color:#D4BE98"> cwd </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> vim.fn.</span><span style="color:#A9B665">getcwd</span><span style="color:#D4BE98">()</span></span>
<span class="line"><span style="color:#EA6962">  local</span><span style="color:#D4BE98"> dune_root </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> vim.lsp.buf.</span><span style="color:#A9B665">list_workspace_folders</span><span style="color:#D4BE98">()[</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4BE98">  vim.</span><span style="color:#A9B665">cmd</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">"cd " </span><span style="color:#E78A4E">..</span><span style="color:#D4BE98"> dune_root)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EA6962">  local</span><span style="color:#D4BE98"> project_name </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> get_project_name</span><span style="color:#D4BE98">(dune_root)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EA6962">  if</span><span style="color:#D4BE98"> project_name </span><span style="color:#EA6962">then</span></span>
<span class="line"><span style="color:#D4BE98">    vim.api.</span><span style="color:#A9B665">nvim_notify</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">"Executing dune project: " </span><span style="color:#E78A4E">..</span><span style="color:#D4BE98"> project_name, vim.log.levels.INFO, &#123;&#125;)</span></span>
<span class="line"><span style="color:#EA6962">  else</span></span>
<span class="line"><span style="color:#D4BE98">    vim.api.</span><span style="color:#A9B665">nvim_notify</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">"No .opam file found in " </span><span style="color:#E78A4E">..</span><span style="color:#D4BE98"> dune_root, vim.log.levels.WARN, &#123;&#125;)</span></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#89B482"> nil</span></span>
<span class="line"><span style="color:#EA6962">  end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4BE98">  vim.</span><span style="color:#A9B665">system</span><span style="color:#D4BE98">(&#123; </span><span style="color:#D8A657">"dune"</span><span style="color:#D4BE98">, </span><span style="color:#D8A657">"exec"</span><span style="color:#D4BE98">, project_name &#125;, &#123; text </span><span style="color:#E78A4E">=</span><span style="color:#89B482"> true</span><span style="color:#D4BE98"> &#125;, </span><span style="color:#EA6962">function</span><span style="color:#D4BE98">(obj)</span></span>
<span class="line"><span style="color:#D4BE98">    vim.</span><span style="color:#A9B665">schedule</span><span style="color:#D4BE98">(</span><span style="color:#EA6962">function</span><span style="color:#D4BE98">()</span></span>
<span class="line"><span style="color:#EA6962">      if</span><span style="color:#E78A4E"> #</span><span style="color:#D4BE98">obj.stderr </span><span style="color:#E78A4E">></span><span style="color:#D3869B"> 0</span><span style="color:#EA6962"> then</span></span>
<span class="line"><span style="color:#D4BE98">        vim.api.</span><span style="color:#A9B665">nvim_notify</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">"dune exec failed..."</span><span style="color:#D4BE98">, vim.log.levels.ERROR, &#123;&#125;)</span></span>
<span class="line"><span style="color:#D4BE98">        vim.api.</span><span style="color:#A9B665">nvim_notify</span><span style="color:#D4BE98">(obj.stderr, vim.log.levels.WARN, &#123;&#125;)</span></span>
<span class="line"><span style="color:#EA6962">      end</span></span>
<span class="line"><span style="color:#EA6962">      if</span><span style="color:#E78A4E"> #</span><span style="color:#D4BE98">obj.stdout </span><span style="color:#E78A4E">></span><span style="color:#D3869B"> 0</span><span style="color:#EA6962"> then</span></span>
<span class="line"><span style="color:#D4BE98">        vim.api.</span><span style="color:#A9B665">nvim_notify</span><span style="color:#D4BE98">(obj.stdout, vim.log.levels.INFO, &#123;&#125;)</span></span>
<span class="line"><span style="color:#EA6962">      end</span></span>
<span class="line"><span style="color:#EA6962">    end</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#EA6962">  end</span><span style="color:#D4BE98">)</span></span>
<span class="line"><span style="color:#D4BE98">  vim.</span><span style="color:#A9B665">cmd</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">"cd " </span><span style="color:#E78A4E">..</span><span style="color:#D4BE98"> cwd)</span></span>
<span class="line"><span style="color:#EA6962">end</span></span></code></pre>`,x;return{c(){p=m("nav"),p.innerHTML=S,g=o(),t=m("h1"),t.innerHTML=q,H=o(),c=m("h2"),c.innerHTML=I,j=o(),A=m("ul"),A.innerHTML=U,w=o(),D=new R(!1),u=o(),d=m("blockquote"),d.innerHTML=F,L=o(),v=new R(!1),h=o(),B=m("blockquote"),B.innerHTML=V,T=o(),r=m("h3"),r.innerHTML=z,M=o(),f=new R(!1),_=o(),i=m("h1"),i.innerHTML=K,C=o(),b=new R(!1),x=Q(),this.h()},l(s){p=y(s,"NAV",{class:!0,"data-svelte-h":!0}),E(p)!=="svelte-fo5fgl"&&(p.innerHTML=S),g=e(s),t=y(s,"H1",{id:!0,"data-svelte-h":!0}),E(t)!=="svelte-1cukwby"&&(t.innerHTML=q),H=e(s),c=y(s,"H2",{id:!0,"data-svelte-h":!0}),E(c)!=="svelte-t62r7o"&&(c.innerHTML=I),j=e(s),A=y(s,"UL",{"data-svelte-h":!0}),E(A)!=="svelte-19fxbvj"&&(A.innerHTML=U),w=e(s),D=O(s,!1),u=e(s),d=y(s,"BLOCKQUOTE",{"data-svelte-h":!0}),E(d)!=="svelte-1ynljcg"&&(d.innerHTML=F),L=e(s),v=O(s,!1),h=e(s),B=y(s,"BLOCKQUOTE",{"data-svelte-h":!0}),E(B)!=="svelte-nuz3ok"&&(B.innerHTML=V),T=e(s),r=y(s,"H3",{id:!0,"data-svelte-h":!0}),E(r)!=="svelte-jxcyon"&&(r.innerHTML=z),M=e(s),f=O(s,!1),_=e(s),i=y(s,"H1",{id:!0,"data-svelte-h":!0}),E(i)!=="svelte-to9zoo"&&(i.innerHTML=K),C=e(s),b=O(s,!1),x=Q(),this.h()},h(){k(p,"class","toc"),k(t,"id","running-commands-in-nvim"),k(c,"id","system-and-schedule-functions"),D.a=u,v.a=h,k(r,"id","chaining-them-together"),f.a=_,k(i,"id","example-with-dune-commands"),b.a=x},m(s,n){a(s,p,n),a(s,g,n),a(s,t,n),a(s,H,n),a(s,c,n),a(s,j,n),a(s,A,n),a(s,w,n),D.m($,s,n),a(s,u,n),a(s,d,n),a(s,L,n),v.m(Y,s,n),a(s,h,n),a(s,B,n),a(s,T,n),a(s,r,n),a(s,M,n),f.m(G,s,n),a(s,_,n),a(s,i,n),a(s,C,n),b.m(J,s,n),a(s,x,n)},p:N,i:N,o:N,d(s){s&&(l(p),l(g),l(t),l(H),l(c),l(j),l(A),l(w),D.d(),l(u),l(d),l(L),v.d(),l(h),l(B),l(T),l(r),l(M),f.d(),l(_),l(i),l(C),l(x),b.d())}}}const ns={title:"A better way to run system commands in Neovim",date:"03-07-25"},{title:es,date:os}=ns;class ps extends X{constructor(p){super(),Z(this,p,null,ss,P,{})}}export{ps as default,ns as metadata};
