import{s as ss,n as S}from"./scheduler.DCuoqBTv.js";import{S as ns,i as as,e as t,s as e,H as I,m as R,c,k as i,f as p,n as P,l as d,g as a,d as l}from"./index.BRAtNGwm.js";function ls(W){let o,Z='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#advent-of-code">Advent of Code</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#zig-implementation">Zig Implementation</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#parsing-the-file">Parsing the file</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#function-for-defining-whether-a-line-is-safe">Function for defining whether a line is ‘safe’</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#putting-all-the-pieces-together-in-our-main-function">putting all the pieces together in our ‘main’ function</a></li></ol></li></ol>',w,r,U='<a aria-hidden="true" tabindex="-1" href="#advent-of-code"><span class="icon icon-link"></span></a>Advent of Code',L,B,F='<li>in my <a href="https://cademichael.github.io/blog/AdventOfZig1" rel="nofollow">previous</a> blog post I explained advent of code. In essence it’s a great way to learn a new language and practice file / string manipulations.</li> <li>the problem for today can be found <a href="https://adventofcode.com/2024/day/2" rel="nofollow">here</a>.</li>',_,y,j='<a aria-hidden="true" tabindex="-1" href="#zig-implementation"><span class="icon icon-link"></span></a>Zig Implementation',H,A,q=`<li>for today’s problem we can’t do a simple implementation because part 2 of the problem involves checking the ‘safety’ of a line if one number is removed from it.
<ul><li>this means we have to check each ‘unsafe’ line <strong>n</strong> times, and because we have to go through each line in the input our total runtime is <code>O(n^2)</code>.</li> <li>to check each line we have to reach for the <code>ArrayList</code> data structure, but we can save time and memory by using the <code>.items</code> field to view a slice of the elements.</li></ul></li>`,T,E,V='<a aria-hidden="true" tabindex="-1" href="#parsing-the-file"><span class="icon icon-link"></span></a>Parsing the file',M,u,G="<li>today I opted for the more simple <code>@embed</code> to get the file converted into a <code>[]u8</code> buffer compiled into the binary.</li>",C,h,X=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#928374;font-style:italic">// embed the file</span></span>
<span class="line"><span style="color:#EA6962">const</span><span style="color:#D4BE98"> input </span><span style="color:#E78A4E">=</span><span style="color:#A9B665"> @embedFile</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">"input.txt"</span><span style="color:#D4BE98">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">// convert it into an iterator</span></span>
<span class="line"><span style="color:#EA6962">var</span><span style="color:#D4BE98"> it </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> mem.</span><span style="color:#A9B665">tokenizeScalar</span><span style="color:#D4BE98">(</span><span style="color:#7DAEA3">u8</span><span style="color:#D4BE98">, input, </span><span style="color:#D8A657">'&#92;n'</span><span style="color:#D4BE98">);</span></span></code></pre>`,v,f,J='<a aria-hidden="true" tabindex="-1" href="#function-for-defining-whether-a-line-is-safe"><span class="icon icon-link"></span></a>Function for defining whether a line is ‘safe’',N,m,K=`<li>if you haven’t followed the link to the problem it is essentially a problem of comparing numbers on the same line.</li> <li>our input is a file with multiple lines, each of which is composed of several numbers
<ul><li>a line is ’<em>safe</em>’ all of the numbers either all increase by at most 3, or decrease by at most 3.</li> <li>for <strong>part2</strong> we have to check if removing a number from a line makes it ’<em>safe</em>’</li></ul></li> <li>instead of operating on an ArrayList we will operate on <em>slices</em> this is a little more performant and we can ignore a specific index rather easily.</li>`,O,b,Y=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#928374;font-style:italic">// helper function to get absolute value of an integer</span></span>
<span class="line"><span style="color:#EA6962">pub</span><span style="color:#EA6962"> fn</span><span style="color:#A9B665"> abs</span><span style="color:#D4BE98">(x: </span><span style="color:#7DAEA3">i32</span><span style="color:#D4BE98">) </span><span style="color:#7DAEA3">i32</span><span style="color:#D4BE98"> &#123;</span></span>
<span class="line"><span style="color:#EA6962">    if</span><span style="color:#D4BE98"> (x </span><span style="color:#E78A4E">&#x3C;</span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">) &#123;</span></span>
<span class="line"><span style="color:#EA6962">        return</span><span style="color:#D4BE98"> x </span><span style="color:#E78A4E">*</span><span style="color:#E78A4E"> -</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">;</span></span>
<span class="line"><span style="color:#D4BE98">    &#125;</span></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#D4BE98"> x;</span></span>
<span class="line"><span style="color:#D4BE98">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">// determine if a line is 'safe'</span></span>
<span class="line"><span style="color:#928374;font-style:italic">// takes a line of numbers and an index to ignore</span></span>
<span class="line"><span style="color:#EA6962">pub</span><span style="color:#EA6962"> fn</span><span style="color:#A9B665"> isSafe</span><span style="color:#D4BE98">(line: []</span><span style="color:#7DAEA3">i32</span><span style="color:#D4BE98">, i: </span><span style="color:#7DAEA3">usize</span><span style="color:#D4BE98">) </span><span style="color:#7DAEA3">bool</span><span style="color:#D4BE98"> &#123;</span></span>
<span class="line"><span style="color:#EA6962">    var</span><span style="color:#D4BE98"> lastNum: </span><span style="color:#7DAEA3">i32</span><span style="color:#E78A4E"> =</span><span style="color:#E78A4E"> -</span><span style="color:#D3869B">1</span><span style="color:#D4BE98">;</span></span>
<span class="line"><span style="color:#EA6962">    var</span><span style="color:#D4BE98"> lastDif: </span><span style="color:#7DAEA3">i32</span><span style="color:#E78A4E"> =</span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">;</span></span>
<span class="line"><span style="color:#EA6962">    for</span><span style="color:#D4BE98"> (line, </span><span style="color:#D3869B">0</span><span style="color:#D4BE98">..) </span><span style="color:#E78A4E">|</span><span style="color:#D4BE98">num, index</span><span style="color:#E78A4E">|</span><span style="color:#D4BE98"> &#123;</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        // first number in line</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> (index </span><span style="color:#E78A4E">==</span><span style="color:#D4BE98"> i) </span><span style="color:#EA6962">continue</span><span style="color:#D4BE98">;</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> (lastNum </span><span style="color:#E78A4E">&#x3C;</span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">) &#123;</span></span>
<span class="line"><span style="color:#D4BE98">            lastNum </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> num;</span></span>
<span class="line"><span style="color:#D4BE98">        &#125; </span><span style="color:#EA6962">else</span><span style="color:#D4BE98"> &#123;</span></span>
<span class="line"><span style="color:#928374;font-style:italic">            // current difference</span></span>
<span class="line"><span style="color:#EA6962">            const</span><span style="color:#D4BE98"> diff </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> (num </span><span style="color:#E78A4E">-</span><span style="color:#D4BE98"> lastNum);</span></span>
<span class="line"><span style="color:#928374;font-style:italic">            // check for 'safety'</span></span>
<span class="line"><span style="color:#EA6962">            if</span><span style="color:#D4BE98"> (diff </span><span style="color:#E78A4E">==</span><span style="color:#D3869B"> 0</span><span style="color:#EA6962"> or</span><span style="color:#928374;font-style:italic"> // no change</span></span>
<span class="line"><span style="color:#A9B665">                abs</span><span style="color:#D4BE98">(diff) </span><span style="color:#E78A4E">></span><span style="color:#D3869B"> 3</span><span style="color:#EA6962"> or</span><span style="color:#928374;font-style:italic"> // inc or dec greater than 3</span></span>
<span class="line"><span style="color:#D4BE98">                (lastDif </span><span style="color:#E78A4E">&#x3C;</span><span style="color:#D3869B"> 0</span><span style="color:#EA6962"> and</span><span style="color:#D4BE98"> diff </span><span style="color:#E78A4E">></span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">) </span><span style="color:#EA6962">or</span><span style="color:#928374;font-style:italic"> // switch from dec to inc</span></span>
<span class="line"><span style="color:#D4BE98">                (lastDif </span><span style="color:#E78A4E">></span><span style="color:#D3869B"> 0</span><span style="color:#EA6962"> and</span><span style="color:#D4BE98"> diff </span><span style="color:#E78A4E">&#x3C;</span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">)) </span><span style="color:#928374;font-style:italic">// switch from inc to dec</span></span>
<span class="line"><span style="color:#D4BE98">            &#123;</span></span>
<span class="line"><span style="color:#EA6962">                return</span><span style="color:#EA6962"> false</span><span style="color:#D4BE98">; </span><span style="color:#928374;font-style:italic">// not a safe line</span></span>
<span class="line"><span style="color:#D4BE98">            &#125;</span></span>
<span class="line"><span style="color:#928374;font-style:italic">            // set last difference and number</span></span>
<span class="line"><span style="color:#D4BE98">            lastDif </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> (num </span><span style="color:#E78A4E">-</span><span style="color:#D4BE98"> lastNum);</span></span>
<span class="line"><span style="color:#D4BE98">            lastNum </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> num;</span></span>
<span class="line"><span style="color:#D4BE98">        &#125;</span></span>
<span class="line"><span style="color:#D4BE98">    &#125;</span></span>
<span class="line"><span style="color:#EA6962">    return</span><span style="color:#EA6962"> true</span><span style="color:#D4BE98">;</span></span>
<span class="line"><span style="color:#D4BE98">&#125;</span></span></code></pre>`,g,D,Q='<a aria-hidden="true" tabindex="-1" href="#putting-all-the-pieces-together-in-our-main-function"><span class="icon icon-link"></span></a>putting all the pieces together in our ‘main’ function',z,x,$=`<pre class="shiki gruvbox" style="background-color:#292828;color:#d4be98" tabindex="0"><code><span class="line"><span style="color:#EA6962">pub</span><span style="color:#EA6962"> fn</span><span style="color:#A9B665"> main</span><span style="color:#D4BE98">() </span><span style="color:#E78A4E">!</span><span style="color:#7DAEA3">void</span><span style="color:#D4BE98"> &#123;</span></span>
<span class="line"><span style="color:#EA6962">    const</span><span style="color:#D4BE98"> allocator </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> std.heap.page_allocator;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4BE98">    std.debug.</span><span style="color:#A9B665">print</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">"AOC 2024 day 2</span><span style="color:#A9B665">&#92;n</span><span style="color:#D8A657">"</span><span style="color:#D4BE98">, .&#123;&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EA6962">    var</span><span style="color:#D4BE98"> it </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> mem.</span><span style="color:#A9B665">tokenizeScalar</span><span style="color:#D4BE98">(</span><span style="color:#7DAEA3">u8</span><span style="color:#D4BE98">, input, </span><span style="color:#D8A657">'&#92;n'</span><span style="color:#D4BE98">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">    // scores for part 1 and 2</span></span>
<span class="line"><span style="color:#EA6962">    var</span><span style="color:#D4BE98"> p1: </span><span style="color:#7DAEA3">i32</span><span style="color:#E78A4E"> =</span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">;</span></span>
<span class="line"><span style="color:#EA6962">    var</span><span style="color:#D4BE98"> p2: </span><span style="color:#7DAEA3">i32</span><span style="color:#E78A4E"> =</span><span style="color:#D3869B"> 0</span><span style="color:#D4BE98">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EA6962">    while</span><span style="color:#D4BE98"> (it.</span><span style="color:#A9B665">next</span><span style="color:#D4BE98">()) </span><span style="color:#E78A4E">|</span><span style="color:#D4BE98">line</span><span style="color:#E78A4E">|</span><span style="color:#D4BE98"> &#123;</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        // get individual numbers</span></span>
<span class="line"><span style="color:#EA6962">        var</span><span style="color:#D4BE98"> nums </span><span style="color:#E78A4E">=</span><span style="color:#D4BE98"> mem.</span><span style="color:#A9B665">tokenizeScalar</span><span style="color:#D4BE98">(</span><span style="color:#7DAEA3">u8</span><span style="color:#D4BE98">, line, </span><span style="color:#D8A657">' '</span><span style="color:#D4BE98">);</span></span>
<span class="line"><span style="color:#928374;font-style:italic">        // ArrayList to hold number values in the line</span></span>
<span class="line"><span style="color:#EA6962">        var</span><span style="color:#D4BE98"> lineNums </span><span style="color:#E78A4E">=</span><span style="color:#7DAEA3"> ArrayList</span><span style="color:#D4BE98">(</span><span style="color:#7DAEA3">i32</span><span style="color:#D4BE98">).</span><span style="color:#A9B665">init</span><span style="color:#D4BE98">(allocator);</span></span>
<span class="line"><span style="color:#EA6962">        defer</span><span style="color:#D4BE98"> lineNums.</span><span style="color:#A9B665">deinit</span><span style="color:#D4BE98">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">        // Populate the ArrayList O(n)</span></span>
<span class="line"><span style="color:#EA6962">        while</span><span style="color:#D4BE98"> (nums.</span><span style="color:#A9B665">next</span><span style="color:#D4BE98">()) </span><span style="color:#E78A4E">|</span><span style="color:#D4BE98">numu8</span><span style="color:#E78A4E">|</span><span style="color:#D4BE98"> &#123;</span></span>
<span class="line"><span style="color:#EA6962">            const</span><span style="color:#D4BE98"> num </span><span style="color:#E78A4E">=</span><span style="color:#EA6962"> try</span><span style="color:#D4BE98"> std.fmt.</span><span style="color:#A9B665">parseInt</span><span style="color:#D4BE98">(</span><span style="color:#7DAEA3">i32</span><span style="color:#D4BE98">, numu8, </span><span style="color:#D3869B">10</span><span style="color:#D4BE98">);</span></span>
<span class="line"><span style="color:#EA6962">            try</span><span style="color:#D4BE98"> lineNums.</span><span style="color:#A9B665">append</span><span style="color:#D4BE98">(num);</span></span>
<span class="line"><span style="color:#D4BE98">        &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">        // if safe add line for p1</span></span>
<span class="line"><span style="color:#EA6962">        if</span><span style="color:#D4BE98"> (</span><span style="color:#A9B665">isSafe</span><span style="color:#D4BE98">(lineNums.items, lineNums.items.len </span><span style="color:#E78A4E">+</span><span style="color:#D3869B"> 1</span><span style="color:#D4BE98">)) &#123; </span><span style="color:#928374;font-style:italic">// O(n)</span></span>
<span class="line"><span style="color:#D4BE98">            p1 </span><span style="color:#E78A4E">+=</span><span style="color:#D3869B"> 1</span><span style="color:#D4BE98">;</span></span>
<span class="line"><span style="color:#D4BE98">            p2 </span><span style="color:#E78A4E">+=</span><span style="color:#D3869B"> 1</span><span style="color:#D4BE98">;</span></span>
<span class="line"><span style="color:#D4BE98">        &#125; </span><span style="color:#EA6962">else</span><span style="color:#D4BE98"> &#123;</span></span>
<span class="line"><span style="color:#928374;font-style:italic">            // if safe with one level removed add line for p2</span></span>
<span class="line"><span style="color:#EA6962">            for</span><span style="color:#D4BE98"> (</span><span style="color:#D3869B">0</span><span style="color:#D4BE98">..lineNums.items.len) </span><span style="color:#E78A4E">|</span><span style="color:#D4BE98">i</span><span style="color:#E78A4E">|</span><span style="color:#D4BE98"> &#123; </span><span style="color:#928374;font-style:italic">// O(n)</span></span>
<span class="line"><span style="color:#928374;font-style:italic">                // take the 'items' field from ArrayList and give the index to ignore</span></span>
<span class="line"><span style="color:#EA6962">                if</span><span style="color:#D4BE98"> (</span><span style="color:#A9B665">isSafe</span><span style="color:#D4BE98">(lineNums.items, i)) &#123; </span><span style="color:#928374;font-style:italic">// O(n)</span></span>
<span class="line"><span style="color:#D4BE98">                    p2 </span><span style="color:#E78A4E">+=</span><span style="color:#D3869B"> 1</span><span style="color:#D4BE98">;</span></span>
<span class="line"><span style="color:#EA6962">                    break</span><span style="color:#D4BE98">;</span></span>
<span class="line"><span style="color:#D4BE98">                &#125;</span></span>
<span class="line"><span style="color:#D4BE98">            &#125; </span><span style="color:#928374;font-style:italic">// total runtime = O(n * n) + O(n) + O(n) = O(n^2)</span></span>
<span class="line"><span style="color:#D4BE98">        &#125;</span></span>
<span class="line"><span style="color:#D4BE98">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#928374;font-style:italic">    // print answer for part1</span></span>
<span class="line"><span style="color:#D4BE98">    std.debug.</span><span style="color:#A9B665">print</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">"Part1 => &#123;d&#125;</span><span style="color:#A9B665">&#92;n</span><span style="color:#D8A657">"</span><span style="color:#D4BE98">, .&#123;p1&#125;);</span></span>
<span class="line"><span style="color:#928374;font-style:italic">    // print answer for part2</span></span>
<span class="line"><span style="color:#D4BE98">    std.debug.</span><span style="color:#A9B665">print</span><span style="color:#D4BE98">(</span><span style="color:#D8A657">"Part2 => &#123;d&#125;</span><span style="color:#A9B665">&#92;n</span><span style="color:#D8A657">"</span><span style="color:#D4BE98">, .&#123;p2&#125;);</span></span>
<span class="line"><span style="color:#D4BE98">&#125;</span></span></code></pre>`,k;return{c(){o=t("nav"),o.innerHTML=Z,w=e(),r=t("h1"),r.innerHTML=U,L=e(),B=t("ul"),B.innerHTML=F,_=e(),y=t("h1"),y.innerHTML=j,H=e(),A=t("ul"),A.innerHTML=q,T=e(),E=t("h2"),E.innerHTML=V,M=e(),u=t("ul"),u.innerHTML=G,C=e(),h=new I(!1),v=e(),f=t("h2"),f.innerHTML=J,N=e(),m=t("ul"),m.innerHTML=K,O=e(),b=new I(!1),g=e(),D=t("h2"),D.innerHTML=Q,z=e(),x=new I(!1),k=R(),this.h()},l(s){o=c(s,"NAV",{class:!0,"data-svelte-h":!0}),i(o)!=="svelte-sz87jl"&&(o.innerHTML=Z),w=p(s),r=c(s,"H1",{id:!0,"data-svelte-h":!0}),i(r)!=="svelte-12y2lw0"&&(r.innerHTML=U),L=p(s),B=c(s,"UL",{"data-svelte-h":!0}),i(B)!=="svelte-ge1c5u"&&(B.innerHTML=F),_=p(s),y=c(s,"H1",{id:!0,"data-svelte-h":!0}),i(y)!=="svelte-zksj5m"&&(y.innerHTML=j),H=p(s),A=c(s,"UL",{"data-svelte-h":!0}),i(A)!=="svelte-1adb3ln"&&(A.innerHTML=q),T=p(s),E=c(s,"H2",{id:!0,"data-svelte-h":!0}),i(E)!=="svelte-1ghau7r"&&(E.innerHTML=V),M=p(s),u=c(s,"UL",{"data-svelte-h":!0}),i(u)!=="svelte-1yy4mys"&&(u.innerHTML=G),C=p(s),h=P(s,!1),v=p(s),f=c(s,"H2",{id:!0,"data-svelte-h":!0}),i(f)!=="svelte-73iah7"&&(f.innerHTML=J),N=p(s),m=c(s,"UL",{"data-svelte-h":!0}),i(m)!=="svelte-15mn6r3"&&(m.innerHTML=K),O=p(s),b=P(s,!1),g=p(s),D=c(s,"H2",{id:!0,"data-svelte-h":!0}),i(D)!=="svelte-140e9u9"&&(D.innerHTML=Q),z=p(s),x=P(s,!1),k=R(),this.h()},h(){d(o,"class","toc"),d(r,"id","advent-of-code"),d(y,"id","zig-implementation"),d(E,"id","parsing-the-file"),h.a=v,d(f,"id","function-for-defining-whether-a-line-is-safe"),b.a=g,d(D,"id","putting-all-the-pieces-together-in-our-main-function"),x.a=k},m(s,n){a(s,o,n),a(s,w,n),a(s,r,n),a(s,L,n),a(s,B,n),a(s,_,n),a(s,y,n),a(s,H,n),a(s,A,n),a(s,T,n),a(s,E,n),a(s,M,n),a(s,u,n),a(s,C,n),h.m(X,s,n),a(s,v,n),a(s,f,n),a(s,N,n),a(s,m,n),a(s,O,n),b.m(Y,s,n),a(s,g,n),a(s,D,n),a(s,z,n),x.m($,s,n),a(s,k,n)},p:S,i:S,o:S,d(s){s&&(l(o),l(w),l(r),l(L),l(B),l(_),l(y),l(H),l(A),l(T),l(E),l(M),l(u),l(C),h.d(),l(v),l(f),l(N),l(m),l(O),b.d(),l(g),l(D),l(z),l(k),x.d())}}}const os={title:"Advent of Code 2024 day 2 in Zig",date:"01-14-25"};class ts extends ns{constructor(o){super(),as(this,o,null,ls,ss,{})}}export{ts as default,os as metadata};
